{"remainingRequest":"/home/vignesh/DIVRT/guest-webapp/node_modules/babel-loader/lib/index.js!/home/vignesh/DIVRT/guest-webapp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vignesh/DIVRT/guest-webapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vignesh/DIVRT/guest-webapp/src/views/GooglePay.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vignesh/DIVRT/guest-webapp/src/views/GooglePay.vue","mtime":1687345808892},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3ZpZ25lc2gvRElWUlQvZ3Vlc3Qtd2ViYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL2hvbWUvdmlnbmVzaC9ESVZSVC9ndWVzdC13ZWJhcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IEFQSUhlbHBlciBmcm9tICIuLi9hcGlIZWxwZXIiOyAvLyBpbXBvcnQgbG9nZ2VySGVscGVyIGZyb20gIi4uL2xvZ2dlckhlbHBlciI7CgppbXBvcnQgeyBtYXBHZXR0ZXJzIH0gZnJvbSAidnVleCI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiR29vZ2xlUGF5IiwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgZ1BheUJ0bkxvYWRpbmc6IGZhbHNlLAogICAgICBhcHBJZDogJ3NhbmRib3gtc3EwaWRiLUp5cjFmTWU4cTFIZFVEUVhLLURRTmcnLAogICAgICBsb2NhdGlvbklkOiAnTDhSMTlGUzlLSDdGUScsCiAgICAgIHBheW1lbnRzOiBudWxsLAogICAgICBnb29nbGVQYXk6IG51bGwsCiAgICAgIGFsZXJ0RGlhbG9nOiBmYWxzZSwKICAgICAgYWxlcnRNc2c6ICIiLAogICAgICBhbGVydEljb246ICJtZGktY2hlY2stY2lyY2xlIgogICAgfTsKICB9LAogIHByb3BzOiB7CiAgICB3aWR0aDogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiAiMTAwJSI7CiAgICAgIH0KICAgIH0sCiAgICBoZWlnaHQ6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gIjUwcHgiOwogICAgICB9CiAgICB9LAogICAgaW9zRGV2aWNlOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQogIH0sCiAgY29tcHV0ZWQ6IF9vYmplY3RTcHJlYWQoe30sIG1hcEdldHRlcnMoewogICAgYm9va2luZ0lkOiAiZ2V0dGVyQm9va2luZ0lkIiwKICAgIGJvb2tpbmdEZXRhaWxzOiAiZ2V0dGVyQm9va2luZ0RldGFpbHMiCiAgfSkpLAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICB2YXIgY2FyZCwgZ29vZ2xlUGF5LCBzZWxmLCBnb29nbGVQYXlCdXR0b247CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX3RoaXMuZ1BheUJ0bkxvYWRpbmcgPSB0cnVlOwoKICAgICAgICAgICAgICBpZiAod2luZG93LlNxdWFyZSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA0OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfdGhpcy5nUGF5QnRuTG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU3F1YXJlLmpzIGZhaWxlZCB0byBsb2FkIHByb3Blcmx5Jyk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSA0OwogICAgICAgICAgICAgIF90aGlzLnBheW1lbnRzID0gd2luZG93LlNxdWFyZS5wYXltZW50cygic2FuZGJveC1zcTBpZGItSnlyMWZNZThxMUhkVURRWEstRFFOZyIsICJMOFIxOUZTOUtIN0ZRIik7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMjsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDg7CiAgICAgICAgICAgICAgX2NvbnRleHQyLnQwID0gX2NvbnRleHQyWyJjYXRjaCJdKDQpOwogICAgICAgICAgICAgIF90aGlzLmdQYXlCdG5Mb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDEyOwogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmluaXRpYWxpemVDYXJkKF90aGlzLnBheW1lbnRzKTsKCiAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgY2FyZCA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjM7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTg7CiAgICAgICAgICAgICAgX2NvbnRleHQyLnQxID0gX2NvbnRleHQyWyJjYXRjaCJdKDEyKTsKICAgICAgICAgICAgICBfdGhpcy5nUGF5QnRuTG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0luaXRpYWxpemluZyBDYXJkIGZhaWxlZCcsIF9jb250ZXh0Mi50MSk7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgY2FzZSAyMzoKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhjYXJkKTsKICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDI0OwogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjc7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmluaXRpYWxpemVHb29nbGVQYXkoX3RoaXMucGF5bWVudHMpOwoKICAgICAgICAgICAgY2FzZSAyNzoKICAgICAgICAgICAgICBnb29nbGVQYXkgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM0OwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSAzMDoKICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDMwOwogICAgICAgICAgICAgIF9jb250ZXh0Mi50MiA9IF9jb250ZXh0MlsiY2F0Y2giXSgyNCk7CiAgICAgICAgICAgICAgX3RoaXMuZ1BheUJ0bkxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdJbml0aWFsaXppbmcgR29vZ2xlIFBheSBmYWlsZWQnLCBfY29udGV4dDIudDIpOyAvLyBUaGVyZSBhcmUgYSBudW1iZXIgb2YgcmVhc29uIHdoeSBHb29nbGUgUGF5IG1heSBub3QgYmUgc3VwcG9ydGVkCiAgICAgICAgICAgICAgLy8gKGUuZy4gQnJvd3NlciBTdXBwb3J0LCBEZXZpY2UgU3VwcG9ydCwgQWNjb3VudCkuIFRoZXJlZm9yZSB5b3Ugc2hvdWxkIGhhbmRsZQogICAgICAgICAgICAgIC8vIGluaXRpYWxpemF0aW9uIGZhaWx1cmVzLCB3aGlsZSBzdGlsbCBsb2FkaW5nIG90aGVyIGFwcGxpY2FibGUgcGF5bWVudCBtZXRob2RzLgoKICAgICAgICAgICAgY2FzZSAzNDoKICAgICAgICAgICAgICBpZiAoZ29vZ2xlUGF5KSB7CiAgICAgICAgICAgICAgICBzZWxmID0gX3RoaXM7CiAgICAgICAgICAgICAgICBnb29nbGVQYXlCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ29vZ2xlLXBheS1idXR0b24nKTsKICAgICAgICAgICAgICAgIGdvb2dsZVBheUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5oYW5kbGVQYXltZW50TWV0aG9kU3VibWlzc2lvbihldmVudCwgZ29vZ2xlUGF5KTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfSgpKTsKICAgICAgICAgICAgICAgIF90aGlzLmdQYXlCdG5Mb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgY2FzZSAzNToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzQsIDhdLCBbMTIsIDE4XSwgWzI0LCAzMF1dKTsKICAgIH0pKSgpOwogIH0sCiAgbWV0aG9kczogewogICAgY2xvc2VBbGVydERpYWxvZzogZnVuY3Rpb24gY2xvc2VBbGVydERpYWxvZygpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX3RoaXMyLmFsZXJ0RGlhbG9nID0gZmFsc2U7CiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmdldEJvb2tpbmdTdGF0ZSgpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBoYW5kbGVQYXltZW50TWV0aG9kU3VibWlzc2lvbjogZnVuY3Rpb24gaGFuZGxlUGF5bWVudE1ldGhvZFN1Ym1pc3Npb24oZXZlbnQsIHBheW1lbnRNZXRob2QpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgICAgICB2YXIgc2VsZiwgdG9rZW5SZXN1bHQsIHZlcmZpZWRUb2tlbjsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgc2VsZiA9IF90aGlzMzsgLy8gY29uc3QgY2FyZEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJjYXJkLWJ1dHRvbiIpOwoKICAgICAgICAgICAgICAgIF90aGlzMy5nUGF5QnRuTG9hZGluZyA9IHRydWU7CiAgICAgICAgICAgICAgICBfY29udGV4dDQucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi50b2tlbml6ZShwYXltZW50TWV0aG9kKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgdG9rZW5SZXN1bHQgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnZlcmlmeUJ1eWVyKF90aGlzMy5wYXltZW50cywgdG9rZW5SZXN1bHQpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICB2ZXJmaWVkVG9rZW4gPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5hZGRDYXJkKHRva2VuUmVzdWx0LCB2ZXJmaWVkVG9rZW4pOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxODsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSAxMzsKICAgICAgICAgICAgICAgIF9jb250ZXh0NC50MCA9IF9jb250ZXh0NFsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICAgIF90aGlzMy5nUGF5QnRuTG9hZGluZyA9IGZhbHNlOyAvLyBjYXJkQnV0dG9uLmRpc2FibGVkID0gZmFsc2U7CgogICAgICAgICAgICAgICAgc2VsZi5kaXNwbGF5UGF5bWVudFJlc3VsdHMoIkZBSUxVUkUiKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoX2NvbnRleHQ0LnQwLm1lc3NhZ2UpOwoKICAgICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU0LCBudWxsLCBbWzIsIDEzXV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBhZGRDYXJkOiBmdW5jdGlvbiBhZGRDYXJkKHRva2VuUmVzdWx0LCB2ZXJmaWVkVG9rZW4pIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHsKICAgICAgICB2YXIgX3Rva2VuUmVzdWx0JGRldGFpbHMsIF90aGlzNCRib29raW5nRGV0YWlscywgX3RoaXM0JGJvb2tpbmdEZXRhaWxzMiwgX3Rva2VuUmVzdWx0JGRldGFpbHMyLCBfdG9rZW5SZXN1bHQkZGV0YWlsczMsIF90b2tlblJlc3VsdCRkZXRhaWxzNDsKCiAgICAgICAgdmFyIGNhcmREYXRhLCBfYWRkQ2FyZCRkYXRhLCBhZGRDYXJkLCBfYWRkQ2FyZCRkYXRhMjsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNhcmREYXRhID0gewogICAgICAgICAgICAgICAgICB1c2VyRGV2aWNlOiAiMiIsCiAgICAgICAgICAgICAgICAgIG9yZGVyVHlwZTogIjMiLAogICAgICAgICAgICAgICAgICBlbnRyeTogW3sKICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbkNvZGU6IF90aGlzNC5ib29raW5nRGV0YWlscy56b25lLmxvY2F0aW9uQ29kZSwKICAgICAgICAgICAgICAgICAgICBzdGFydEF0OiBfdGhpczQuYm9va2luZ0RldGFpbHMuYm9va2luZy5zdGFydEF0LAogICAgICAgICAgICAgICAgICAgIHF1YW50aXR5OiAiMSIKICAgICAgICAgICAgICAgICAgfV0sCiAgICAgICAgICAgICAgICAgIHBheW1lbnRUeXBlOiAiR09PR0xFX1BBWSIsCiAgICAgICAgICAgICAgICAgIGJpbGxpbmdEZXRhaWxzOiB0b2tlblJlc3VsdCA9PT0gbnVsbCB8fCB0b2tlblJlc3VsdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF90b2tlblJlc3VsdCRkZXRhaWxzID0gdG9rZW5SZXN1bHQuZGV0YWlscykgPT09IG51bGwgfHwgX3Rva2VuUmVzdWx0JGRldGFpbHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90b2tlblJlc3VsdCRkZXRhaWxzLmJpbGxpbmcsCiAgICAgICAgICAgICAgICAgIHZlcmlmaWNhdGlvbl90b2tlbjogdmVyZmllZFRva2VuLAogICAgICAgICAgICAgICAgICBzb3VyY2VfaWQ6IHRva2VuUmVzdWx0LnRva2VuLAogICAgICAgICAgICAgICAgICBwaG9uZU51bWJlcjogIisiICsgKChfdGhpczQkYm9va2luZ0RldGFpbHMgPSBfdGhpczQuYm9va2luZ0RldGFpbHMpID09PSBudWxsIHx8IF90aGlzNCRib29raW5nRGV0YWlscyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF90aGlzNCRib29raW5nRGV0YWlsczIgPSBfdGhpczQkYm9va2luZ0RldGFpbHMudXNlcikgPT09IG51bGwgfHwgX3RoaXM0JGJvb2tpbmdEZXRhaWxzMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXM0JGJvb2tpbmdEZXRhaWxzMi5jb250YWN0KSwKICAgICAgICAgICAgICAgICAgZW1haWw6ICh0b2tlblJlc3VsdCA9PT0gbnVsbCB8fCB0b2tlblJlc3VsdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF90b2tlblJlc3VsdCRkZXRhaWxzMiA9IHRva2VuUmVzdWx0LmRldGFpbHMpID09PSBudWxsIHx8IF90b2tlblJlc3VsdCRkZXRhaWxzMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF90b2tlblJlc3VsdCRkZXRhaWxzMyA9IF90b2tlblJlc3VsdCRkZXRhaWxzMi5zaGlwcGluZykgPT09IG51bGwgfHwgX3Rva2VuUmVzdWx0JGRldGFpbHMzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX3Rva2VuUmVzdWx0JGRldGFpbHM0ID0gX3Rva2VuUmVzdWx0JGRldGFpbHMzLmNvbnRhY3QpID09PSBudWxsIHx8IF90b2tlblJlc3VsdCRkZXRhaWxzNCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3Rva2VuUmVzdWx0JGRldGFpbHM0LmVtYWlsKSB8fCAiIgogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5wcmV2ID0gMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBBUElIZWxwZXIoIlBPU1QiLCAiL2FwaS92MS9wYXltZW50L2FkZENhcmQvIiArIF90aGlzNC5ib29raW5nSWQsIGNhcmREYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgYWRkQ2FyZCA9IF9jb250ZXh0NS5zZW50OwoKICAgICAgICAgICAgICAgIGlmICghKChhZGRDYXJkID09PSBudWxsIHx8IGFkZENhcmQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfYWRkQ2FyZCRkYXRhID0gYWRkQ2FyZC5kYXRhKSA9PT0gbnVsbCB8fCBfYWRkQ2FyZCRkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYWRkQ2FyZCRkYXRhLnN0YXR1cykgPT0gZmFsc2UpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF90aGlzNC5nUGF5QnRuTG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgX3RoaXM0LmFsZXJ0TXNnID0gKGFkZENhcmQgPT09IG51bGwgfHwgYWRkQ2FyZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9hZGRDYXJkJGRhdGEyID0gYWRkQ2FyZC5kYXRhKSA9PT0gbnVsbCB8fCBfYWRkQ2FyZCRkYXRhMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FkZENhcmQkZGF0YTIubWVzc2FnZSkgfHwgIkVycm9yIGluIGF1dGhvcml6aW5nIHRoZSBwYXltZW50IjsKICAgICAgICAgICAgICAgIF90aGlzNC5hbGVydEljb24gPSAibWRpLWFsZXJ0LW91dGxpbmUiOwogICAgICAgICAgICAgICAgX3RoaXM0LmFsZXJ0RGlhbG9nID0gdHJ1ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIF90aGlzNC5nUGF5QnRuTG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAxNTsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczQuZ2V0Qm9va2luZ1N0YXRlKCk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDIxOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICBfY29udGV4dDUucHJldiA9IDE3OwogICAgICAgICAgICAgICAgX2NvbnRleHQ1LnQwID0gX2NvbnRleHQ1WyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgICAgX3RoaXM0LmdQYXlCdG5Mb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dDUudDApOwoKICAgICAgICAgICAgICBjYXNlIDIxOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU1LCBudWxsLCBbWzEsIDE3XV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBnZXRCb29raW5nU3RhdGU6IGZ1bmN0aW9uIGdldEJvb2tpbmdTdGF0ZSgpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNigpIHsKICAgICAgICB2YXIgX2JEZXRhaWxzJGRhdGEsIF9iRGV0YWlscyRkYXRhMiwgX2JEZXRhaWxzJGRhdGEyJGRhdGEsIF9iRGV0YWlscyRkYXRhMiRkYXRhJCwgYkRldGFpbHMsIGJvb2tpbmdTdGF0ZTsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ2LnByZXYgPSBfY29udGV4dDYubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmICghKF90aGlzNS5ib29raW5nSWQgIT0gbnVsbCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAxMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQ2LnByZXYgPSAxOwogICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIEFQSUhlbHBlcigiR0VUIiwgIi9hcGkvdjEvYm9va2luZy9jb25maWcvIiArIF90aGlzNS5ib29raW5nSWQpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICBiRGV0YWlscyA9IF9jb250ZXh0Ni5zZW50OwoKICAgICAgICAgICAgICAgIF90aGlzNS4kc3RvcmUuY29tbWl0KCJTRVRfQk9PS0lOR19ERVRBSUxTIiwgKF9iRGV0YWlscyRkYXRhID0gYkRldGFpbHMuZGF0YSkgIT09IG51bGwgJiYgX2JEZXRhaWxzJGRhdGEgIT09IHZvaWQgMCAmJiBfYkRldGFpbHMkZGF0YS5kYXRhID8gYkRldGFpbHMuZGF0YS5kYXRhIDogbnVsbCk7CgogICAgICAgICAgICAgICAgYm9va2luZ1N0YXRlID0gKF9iRGV0YWlscyRkYXRhMiA9IGJEZXRhaWxzLmRhdGEpICE9PSBudWxsICYmIF9iRGV0YWlscyRkYXRhMiAhPT0gdm9pZCAwICYmIChfYkRldGFpbHMkZGF0YTIkZGF0YSA9IF9iRGV0YWlscyRkYXRhMi5kYXRhKSAhPT0gbnVsbCAmJiBfYkRldGFpbHMkZGF0YTIkZGF0YSAhPT0gdm9pZCAwICYmIChfYkRldGFpbHMkZGF0YTIkZGF0YSQgPSBfYkRldGFpbHMkZGF0YTIkZGF0YS5ib29raW5nKSAhPT0gbnVsbCAmJiBfYkRldGFpbHMkZGF0YTIkZGF0YSQgIT09IHZvaWQgMCAmJiBfYkRldGFpbHMkZGF0YTIkZGF0YSQuc3RhdGUgPyBiRGV0YWlscy5kYXRhLmRhdGEuYm9va2luZy5zdGF0ZSA6IG51bGw7CgogICAgICAgICAgICAgICAgaWYgKGJvb2tpbmdTdGF0ZSA9PSA4IHx8IGJvb2tpbmdTdGF0ZSA9PSAxMCB8fCBib29raW5nU3RhdGUgPT0gMTEpIHsKICAgICAgICAgICAgICAgICAgX3RoaXM1LiRyb3V0ZXIucmVwbGFjZSh7CiAgICAgICAgICAgICAgICAgICAgcGF0aDogIi9jaGVja291dCIKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJvb2tpbmdTdGF0ZSA9PSAyKSB7CiAgICAgICAgICAgICAgICAgIF90aGlzNS4kcm91dGVyLnJlcGxhY2UoewogICAgICAgICAgICAgICAgICAgIHBhdGg6ICIvY2hlY2tlZGluIgogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBfY29udGV4dDYucHJldiA9IDEwOwogICAgICAgICAgICAgICAgX2NvbnRleHQ2LnQwID0gX2NvbnRleHQ2WyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQ2LnQwKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNiwgbnVsbCwgW1sxLCAxMF1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgdmVyaWZ5QnV5ZXI6IGZ1bmN0aW9uIHZlcmlmeUJ1eWVyKHBheW1lbnRzLCB0b2tlblJlc3VsdCkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNygpIHsKICAgICAgICB2YXIgX3Rva2VuUmVzdWx0JGRldGFpbHM1OwoKICAgICAgICB2YXIgdmVyaWZpY2F0aW9uRGV0YWlscywgdmVyaWZpY2F0aW9uUmVzdWx0czsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTckKF9jb250ZXh0NykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDcucHJldiA9IF9jb250ZXh0Ny5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgdmVyaWZpY2F0aW9uRGV0YWlscyA9IHsKICAgICAgICAgICAgICAgICAgYmlsbGluZ0NvbnRhY3Q6IHRva2VuUmVzdWx0ID09PSBudWxsIHx8IHRva2VuUmVzdWx0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX3Rva2VuUmVzdWx0JGRldGFpbHM1ID0gdG9rZW5SZXN1bHQuZGV0YWlscykgPT09IG51bGwgfHwgX3Rva2VuUmVzdWx0JGRldGFpbHM1ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdG9rZW5SZXN1bHQkZGV0YWlsczUuYmlsbGluZywKICAgICAgICAgICAgICAgICAgYW1vdW50OiAiMSIsCiAgICAgICAgICAgICAgICAgIGN1cnJlbmN5Q29kZTogIlVTRCIsCiAgICAgICAgICAgICAgICAgIGludGVudDogIkNIQVJHRSIKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gcGF5bWVudHMudmVyaWZ5QnV5ZXIodG9rZW5SZXN1bHQgPT09IG51bGwgfHwgdG9rZW5SZXN1bHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRva2VuUmVzdWx0LnRva2VuLCB2ZXJpZmljYXRpb25EZXRhaWxzKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgdmVyaWZpY2F0aW9uUmVzdWx0cyA9IF9jb250ZXh0Ny5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5hYnJ1cHQoInJldHVybiIsIHZlcmlmaWNhdGlvblJlc3VsdHMudG9rZW4pOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTcpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBpbml0aWFsaXplQ2FyZDogZnVuY3Rpb24gaW5pdGlhbGl6ZUNhcmQocGF5bWVudHMpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTgoKSB7CiAgICAgICAgdmFyIGNhcmQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU4JChfY29udGV4dDgpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ4LnByZXYgPSBfY29udGV4dDgubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBwYXltZW50cy5jYXJkKCk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIGNhcmQgPSBfY29udGV4dDguc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguYWJydXB0KCJyZXR1cm4iLCBjYXJkKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU4KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgYnVpbGRQYXltZW50UmVxdWVzdDogZnVuY3Rpb24gYnVpbGRQYXltZW50UmVxdWVzdChwYXltZW50cykgewogICAgICByZXR1cm4gcGF5bWVudHMucGF5bWVudFJlcXVlc3QoewogICAgICAgIGNvdW50cnlDb2RlOiAiVVMiLAogICAgICAgIGN1cnJlbmN5Q29kZTogIlVTRCIsCiAgICAgICAgcmVxdWVzdEJpbGxpbmdDb250YWN0OiB0cnVlLAogICAgICAgIHJlcXVlc3RTaGlwcGluZ0NvbnRhY3Q6IHRydWUsCiAgICAgICAgdG90YWxQcmljZVN0YXR1czogJ0VTVElNQVRFRCcsCiAgICAgICAgdG90YWw6IHsKICAgICAgICAgIGFtb3VudDogIjAuMDAiLAogICAgICAgICAgbGFiZWw6ICJUb3RhbCIsCiAgICAgICAgICBwZW5kaW5nOiB0cnVlCiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBpbml0aWFsaXplR29vZ2xlUGF5OiBmdW5jdGlvbiBpbml0aWFsaXplR29vZ2xlUGF5KHBheW1lbnRzKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTkoKSB7CiAgICAgICAgdmFyIHBheW1lbnRSZXF1ZXN0LCBnb29nbGVQYXksIGdvb2dsZVBheUJ1dHRvbk9wdGlvbnM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU5JChfY29udGV4dDkpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ5LnByZXYgPSBfY29udGV4dDkubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHBheW1lbnRSZXF1ZXN0ID0gX3RoaXM2LmJ1aWxkUGF5bWVudFJlcXVlc3QocGF5bWVudHMpOwogICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIHBheW1lbnRzLmdvb2dsZVBheShwYXltZW50UmVxdWVzdCk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIGdvb2dsZVBheSA9IF9jb250ZXh0OS5zZW50OwogICAgICAgICAgICAgICAgLy8gTm90ZTogWW91IGRvIG5vdCBuZWVkIHRvIGBhdHRhY2hgIGdvb2dsZVBheS4KICAgICAgICAgICAgICAgIGdvb2dsZVBheUJ1dHRvbk9wdGlvbnMgPSB7CiAgICAgICAgICAgICAgICAgIGJ1dHRvbkNvbG9yOiAnZGVmYXVsdCcsCiAgICAgICAgICAgICAgICAgIGJ1dHRvblR5cGU6ICdwYXknCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIGdvb2dsZVBheS5hdHRhY2goJyNnb29nbGUtcGF5LWJ1dHRvbicsIGdvb2dsZVBheUJ1dHRvbk9wdGlvbnMpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LmFicnVwdCgicmV0dXJuIiwgZ29vZ2xlUGF5KTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU5KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgY3JlYXRlUGF5bWVudDogZnVuY3Rpb24gY3JlYXRlUGF5bWVudCh0b2tlbikgewogICAgICB2YXIgX3RoaXM3ID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMCgpIHsKICAgICAgICB2YXIgbG9jYXRpb25JZCwgYm9keSwgcGF5bWVudFJlc3BvbnNlLCBlcnJvckJvZHk7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMCQoX2NvbnRleHQxMCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDEwLnByZXYgPSBfY29udGV4dDEwLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBsb2NhdGlvbklkID0gX3RoaXM3LmxvY2F0aW9uSWQ7CiAgICAgICAgICAgICAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgICBsb2NhdGlvbklkOiBsb2NhdGlvbklkLAogICAgICAgICAgICAgICAgICBzb3VyY2VJZDogdG9rZW4KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMC5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaCgiL3BheW1lbnQiLCB7CiAgICAgICAgICAgICAgICAgIG1ldGhvZDogIlBPU1QiLAogICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBib2R5OiBib2R5CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgcGF5bWVudFJlc3BvbnNlID0gX2NvbnRleHQxMC5zZW50OwoKICAgICAgICAgICAgICAgIGlmICghcGF5bWVudFJlc3BvbnNlLm9rKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLmFicnVwdCgicmV0dXJuIiwgcGF5bWVudFJlc3BvbnNlLmpzb24oKSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDk7CiAgICAgICAgICAgICAgICByZXR1cm4gcGF5bWVudFJlc3BvbnNlLnRleHQoKTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgZXJyb3JCb2R5ID0gX2NvbnRleHQxMC5zZW50OwogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yQm9keSk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxMCk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIENoYW5nZSB0aGUgcGFyYW1ldGVyIHRvICdwYXltZW50TWV0aG9kJwogICAgdG9rZW5pemU6IGZ1bmN0aW9uIHRva2VuaXplKHBheW1lbnRNZXRob2QpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTExKCkgewogICAgICAgIHZhciB0b2tlblJlc3VsdCwgZXJyb3JNZXNzYWdlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTEkKF9jb250ZXh0MTEpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMS5wcmV2ID0gX2NvbnRleHQxMS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBwYXltZW50TWV0aG9kLnRva2VuaXplKCk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHRva2VuUmVzdWx0ID0gX2NvbnRleHQxMS5zZW50OwoKICAgICAgICAgICAgICAgIGlmICghKHRva2VuUmVzdWx0LnN0YXR1cyA9PT0gIk9LIikpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gNzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTEuYWJydXB0KCJyZXR1cm4iLCB0b2tlblJlc3VsdCk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9ICJUb2tlbml6YXRpb24gZmFpbGVkIHdpdGggc3RhdHVzOiAiLmNvbmNhdCh0b2tlblJlc3VsdC5zdGF0dXMpOwoKICAgICAgICAgICAgICAgIGlmICh0b2tlblJlc3VsdC5lcnJvcnMpIHsKICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlICs9ICIgYW5kIGVycm9yczogIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkodG9rZW5SZXN1bHQuZXJyb3JzKSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDExLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxMSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIHN0YXR1cyBpcyBlaXRoZXIgU1VDQ0VTUyBvciBGQUlMVVJFOwogICAgZGlzcGxheVBheW1lbnRSZXN1bHRzOiBmdW5jdGlvbiBkaXNwbGF5UGF5bWVudFJlc3VsdHMoc3RhdHVzKSB7CiAgICAgIGNvbnNvbGUubG9nKCJkaXNwbGF5UGF5bWVudFJlc3VsdHMgPT0+IHN0YXR1cyIsIHN0YXR1cyk7IC8vIGNvbnN0IHN0YXR1c0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKAogICAgICAvLyAgICJwYXltZW50LXN0YXR1cy1jb250YWluZXIiCiAgICAgIC8vICk7CiAgICAgIC8vIGlmIChzdGF0dXMgPT09ICJTVUNDRVNTIikgewogICAgICAvLyAgIHN0YXR1c0NvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCJpcy1mYWlsdXJlIik7CiAgICAgIC8vICAgc3RhdHVzQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoImlzLXN1Y2Nlc3MiKTsKICAgICAgLy8gfSBlbHNlIHsKICAgICAgLy8gICBzdGF0dXNDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgiaXMtc3VjY2VzcyIpOwogICAgICAvLyAgIHN0YXR1c0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCJpcy1mYWlsdXJlIik7CiAgICAgIC8vIH0KICAgICAgLy8gc3RhdHVzQ29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSAidmlzaWJsZSI7CiAgICB9CiAgfQp9Ow=="},null]}