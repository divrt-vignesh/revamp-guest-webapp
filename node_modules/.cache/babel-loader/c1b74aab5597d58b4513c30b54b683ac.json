{"remainingRequest":"/home/vignesh/DIVRT/guest-webapp/node_modules/babel-loader/lib/index.js!/home/vignesh/DIVRT/guest-webapp/node_modules/eslint-loader/index.js??ref--13-0!/home/vignesh/DIVRT/guest-webapp/src/loggerHelper.js","dependencies":[{"path":"/home/vignesh/DIVRT/guest-webapp/src/loggerHelper.js","mtime":1678256596555},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/vignesh/DIVRT/guest-webapp/src/loggerHelper.js"],"names":["axios","loggerAPI","create","baseURL","process","env","VUE_APP_LOGGER_URL","withCredentials","headers","processRequest","reqType","url","data","apiGetRequest","apiGetResponse","console","log","apiPostRequest","apiPostResponse","apiPutRequest","apiPutResponse","apiDeleteRequest","apiDeleteResponse","get","post","delete","put"],"mappings":"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","sourcesContent":["import axios from 'axios';\nconst loggerAPI = axios.create({\n  baseURL: process.env.VUE_APP_LOGGER_URL,\n  withCredentials: true,\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  }\n});\n\n\n\nconst processRequest = async (reqType, url, data) => {\n  switch (reqType) {\n    case 'GET':\n      try {\n        var apiGetResponse = await apiGetRequest(url, data);\n        return apiGetResponse;\n      } catch (error) {\n        console.log(error);\n      }\n      break;\n    case 'POST':\n      try {\n        var apiPostResponse = await apiPostRequest(url, data);\n        return apiPostResponse;\n      } catch (error) {\n        console.log(error);\n      }\n      break;\n    case 'PUT':\n      try {\n        var apiPutResponse = await apiPutRequest(url, data);\n        return apiPutResponse;\n      } catch (error) {\n        console.log(error);\n      }\n      break;\n    case 'DELETE':\n      try {\n        var apiDeleteResponse = await apiDeleteRequest(url, data);\n        return apiDeleteResponse;\n      } catch (error) {\n        console.log(error);\n      }\n      break;\n  }\n};\nconst apiGetRequest = async (url, data) => {\n  try {\n    return loggerAPI.get(url, data);\n  } catch (error) {\n    return error\n  }\n};\n\nconst apiPostRequest = async (url, data) => {\n  try {\n    return loggerAPI.post(url, data)\n  } catch (error) {\n    return error\n  }\n};\n\nconst apiDeleteRequest = async (url, data) => {\n  try {\n    return loggerAPI.delete(url, data)\n  } catch (error) {\n    return error\n  }\n};\n\nconst apiPutRequest = async (url, data) => {\n  try {\n    return loggerAPI.put(url, data)\n  } catch (error) {\n    return error\n  }\n};\n\nexport default processRequest;"]}]}