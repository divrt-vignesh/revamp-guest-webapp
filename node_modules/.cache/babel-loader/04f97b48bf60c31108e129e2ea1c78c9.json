{"remainingRequest":"/home/vignesh/DIVRT/guest-webapp/node_modules/babel-loader/lib/index.js!/home/vignesh/DIVRT/guest-webapp/node_modules/eslint-loader/index.js??ref--13-0!/home/vignesh/DIVRT/guest-webapp/src/utils/util.js","dependencies":[{"path":"/home/vignesh/DIVRT/guest-webapp/src/utils/util.js","mtime":1673431795467},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvaG9tZS92aWduZXNoL0RJVlJUL2d1ZXN0LXdlYmFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuaXMtaW50ZWdlci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3Rvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1maXhlZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5wYXJzZS1mbG9hdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zZXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7Cgp2YXIgY29udmVydFRvRGVjaW1hbCA9IGZ1bmN0aW9uIGNvbnZlcnRUb0RlY2ltYWwoZGF0YSkgewogIGlmIChOdW1iZXIuaXNJbnRlZ2VyKE51bWJlcihkYXRhKSkgfHwgTnVtYmVyKGRhdGEpID09IDApIHsKICAgIHJldHVybiBkYXRhOwogIH0gZWxzZSB7CiAgICByZXR1cm4gTnVtYmVyLnBhcnNlRmxvYXQoTnVtYmVyKGRhdGEpKS50b0ZpeGVkKDIpOwogIH0KfTsKLyoqIGlmIHRoZSBudW1iZXIgaXMgbGVzcyB0aGF0IDEwID0+IGFkZCAnMCcgdG8gdGhlIG51bWJlciAqLwoKCnZhciBtaW5Ud29EaWdpdHMgPSBmdW5jdGlvbiBtaW5Ud29EaWdpdHMobikgewogIHJldHVybiAobiA8IDEwID8gJzAnIDogJycpICsgbjsKfTsKLyoqIENoZWNrIGlmIHRoZSBkYXRhW2tleV0gaXMgZW1wdHkgZm9yIGFsbCByb3dzICAqLwoKCnZhciBpc0tleURhdGFFbXB0eSA9IGZ1bmN0aW9uIGlzS2V5RGF0YUVtcHR5KGtleSwgZGF0YSkgewogIGlmIChkYXRhLmxlbmd0aCA9PSAwKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIHZhciBrZXlEYXRhID0gX3RvQ29uc3VtYWJsZUFycmF5KG5ldyBTZXQoZGF0YS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgIHJldHVybiBpdGVtW2tleV07CiAgfSkpKTsKCiAgcmV0dXJuIGtleURhdGEuZmlsdGVyKGZ1bmN0aW9uIChtKSB7CiAgICByZXR1cm4gbTsKICB9KS5sZW5ndGggPT0gMCA/IHRydWUgOiBmYWxzZTsKfTsKCnZhciBnZW5QYXNzID0gZnVuY3Rpb24gZ2VuUGFzcygpIHsKICB2YXIgYyA9ICJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eiI7CiAgYyArPSBjLnRvVXBwZXJDYXNlKCkgKyAxMjM0NTY3ODkwOwogIHJldHVybiBfdG9Db25zdW1hYmxlQXJyYXkoQXJyYXkoNikpLm1hcChmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gY1t+fihNYXRoLnJhbmRvbSgpICogNjIpXTsKICB9KS5qb2luKCIiKTsKfTsKCmV4cG9ydCB7IGNvbnZlcnRUb0RlY2ltYWwsIG1pblR3b0RpZ2l0cywgaXNLZXlEYXRhRW1wdHksIGdlblBhc3MgfTs="},{"version":3,"sources":["/home/vignesh/DIVRT/guest-webapp/src/utils/util.js"],"names":["convertToDecimal","data","Number","isInteger","parseFloat","toFixed","minTwoDigits","n","isKeyDataEmpty","key","length","keyData","Set","map","item","filter","m","genPass","c","toUpperCase","Array","Math","random","join"],"mappings":";;;;;;;;;;;;;AAAA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAU;AAC/B,MAAIC,MAAM,CAACC,SAAP,CAAiBD,MAAM,CAACD,IAAD,CAAvB,KAAkCC,MAAM,CAACD,IAAD,CAAN,IAAgB,CAAtD,EAAyD;AACrD,WAAOA,IAAP;AACH,GAFD,MAEO;AACH,WAAOC,MAAM,CAACE,UAAP,CAAkBF,MAAM,CAACD,IAAD,CAAxB,EAAgCI,OAAhC,CAAwC,CAAxC,CAAP;AACH;AACJ,CAND;AAOA;;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,CAAD,EAAO;AACxB,SAAO,CAACA,CAAC,GAAG,EAAJ,GAAS,GAAT,GAAe,EAAhB,IAAsBA,CAA7B;AACH,CAFD;AAKA;;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD,EAAMR,IAAN,EAAe;AAClC,MAAIA,IAAI,CAACS,MAAL,IAAe,CAAnB,EAAsB;AAClB,WAAO,IAAP;AACH;;AACD,MAAIC,OAAO,sBACJ,IAAIC,GAAJ,CAAQX,IAAI,CAACY,GAAL,CAAS,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACL,GAAD,CAAd;AAAA,GAAT,CAAR,CADI,CAAX;;AAGA,SAAOE,OAAO,CAACI,MAAR,CAAe,UAACC,CAAD;AAAA,WAAOA,CAAP;AAAA,GAAf,EAAyBN,MAAzB,IAAmC,CAAnC,GAAuC,IAAvC,GAA8C,KAArD;AACH,CARD;;AASA,IAAMO,OAAO,GAAG,SAAVA,OAAU,GAAK;AACf,MAAIC,CAAC,GAAG,4BAAR;AACAA,EAAAA,CAAC,IAAIA,CAAC,CAACC,WAAF,KAAkB,UAAvB;AACA,SAAO,mBAAIC,KAAK,CAAC,CAAD,CAAT,EAAcP,GAAd,CAAkB;AAAA,WAAMK,CAAC,CAAC,CAAC,EAAEG,IAAI,CAACC,MAAL,KAAgB,EAAlB,CAAF,CAAP;AAAA,GAAlB,EAAmDC,IAAnD,CAAwD,EAAxD,CAAP;AACL,CAJD;;AAKA,SAASvB,gBAAT,EAA2BM,YAA3B,EAAyCE,cAAzC,EAAwDS,OAAxD","sourcesContent":["const convertToDecimal = (data) => {\n    if (Number.isInteger(Number(data)) || Number(data) == 0) {\n        return data\n    } else {\n        return Number.parseFloat(Number(data)).toFixed(2)\n    }\n}\n/** if the number is less that 10 => add '0' to the number */\nconst minTwoDigits = (n) => {\n    return (n < 10 ? '0' : '') + n;\n}\n\n\n/** Check if the data[key] is empty for all rows  */\nconst isKeyDataEmpty = (key, data) => {\n    if (data.length == 0) {\n        return true;\n    }\n    let keyData = [\n        ...new Set(data.map((item) => item[key])),\n    ]\n    return keyData.filter((m) => m).length == 0 ? true : false;\n}\nconst genPass = () =>{\n      let c = \"abcdefghijklmnopqrstuvwxyz\";\n      c += c.toUpperCase() + 1234567890;\n      return [...Array(6)].map(() => c[~~(Math.random() * 62)]).join(\"\");\n}\nexport { convertToDecimal, minTwoDigits, isKeyDataEmpty,genPass }"]}]}