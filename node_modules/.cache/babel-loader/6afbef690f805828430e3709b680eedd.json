{"remainingRequest":"/home/vignesh/DIVRT/guest-webapp/node_modules/babel-loader/lib/index.js!/home/vignesh/DIVRT/guest-webapp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vignesh/DIVRT/guest-webapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vignesh/DIVRT/guest-webapp/src/uiComponents/SpherePhoneNumberInput/assets/RecycleScroller.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vignesh/DIVRT/guest-webapp/src/uiComponents/SpherePhoneNumberInput/assets/RecycleScroller.vue","mtime":1686725510912},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["RecycleScroller.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div\n      v-observe-visibility=\"handleVisibilityChange\"\n      class=\"vue-recycle-scroller\"\n      :class=\"{\n        ready,\n        'page-mode': pageMode,\n        [`direction-${direction}`]: true,\n      }\"\n      @scroll.passive=\"handleScroll\"\n    >\n      <div\n        v-if=\"$slots.before\"\n        ref=\"before\"\n        class=\"vue-recycle-scroller__slot\"\n      >\n        <slot\n          name=\"before\"\n        />\n      </div>\n  \n      <component\n        :is=\"listTag\"\n        ref=\"wrapper\"\n        :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\n        class=\"vue-recycle-scroller__item-wrapper\"\n        :class=\"listClass\"\n      >\n        <component\n          :is=\"itemTag\"\n          v-for=\"view of pool\"\n          :key=\"view.nr.id\"\n          :style=\"ready ? {\n            transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px) translate${direction === 'vertical' ? 'X' : 'Y'}(${view.offset}px)`,\n            width: gridItems ? `${direction === 'vertical' ? itemSecondarySize || itemSize : itemSize}px` : undefined,\n            height: gridItems ? `${direction === 'horizontal' ? itemSecondarySize || itemSize : itemSize}px` : undefined,\n          } : null\"\n          class=\"vue-recycle-scroller__item-view\"\n          :class=\"[\n            itemClass,\n            {\n              hover: !skipHover && hoverKey === view.nr.key\n            },\n          ]\"\n          v-on=\"skipHover ? {} : {\n            mouseenter: () => { hoverKey = view.nr.key },\n            mouseleave: () => { hoverKey = null },\n          }\"\n        >\n          <slot\n            :item=\"view.item\"\n            :index=\"view.nr.index\"\n            :active=\"view.nr.used\"\n          />\n        </component>\n  \n        <slot\n          name=\"empty\"\n        />\n      </component>\n  \n      <div\n        v-if=\"$slots.after\"\n        ref=\"after\"\n        class=\"vue-recycle-scroller__slot\"\n      >\n        <slot\n          name=\"after\"\n        />\n      </div>\n  \n      <ResizeObserver @notify=\"handleResize\" />\n    </div>\n  </template>\n  \n  <script>\n  import { shallowReactive, markRaw } from 'vue'\n  import { ResizeObserver } from 'vue-resize'\n  import { ObserveVisibility } from 'vue-observe-visibility'\n  import { getScrollParent } from '../assets/ScrollParent'\n  import config from '../config'\n  import { props, simpleArray } from './common'\n  import { supportsPassive } from '../assets/util'\n  \n  let uid = 0\n  \n  export default {\n    name: 'RecycleScroller',\n  \n    components: {\n      ResizeObserver,\n    },\n  \n    directives: {\n      ObserveVisibility,\n    },\n  \n    props: {\n      ...props,\n  \n      itemSize: {\n        type: Number,\n        default: null,\n      },\n  \n      gridItems: {\n        type: Number,\n        default: undefined,\n      },\n  \n      itemSecondarySize: {\n        type: Number,\n        default: undefined,\n      },\n  \n      minItemSize: {\n        type: [Number, String],\n        default: null,\n      },\n  \n      sizeField: {\n        type: String,\n        default: 'size',\n      },\n  \n      typeField: {\n        type: String,\n        default: 'type',\n      },\n  \n      buffer: {\n        type: Number,\n        default: 200,\n      },\n  \n      pageMode: {\n        type: Boolean,\n        default: false,\n      },\n  \n      prerender: {\n        type: Number,\n        default: 0,\n      },\n  \n      emitUpdate: {\n        type: Boolean,\n        default: false,\n      },\n  \n      updateInterval: {\n        type: Number,\n        default: 0,\n      },\n  \n      skipHover: {\n        type: Boolean,\n        default: false,\n      },\n  \n      listTag: {\n        type: String,\n        default: 'div',\n      },\n  \n      itemTag: {\n        type: String,\n        default: 'div',\n      },\n  \n      listClass: {\n        type: [String, Object, Array],\n        default: '',\n      },\n  \n      itemClass: {\n        type: [String, Object, Array],\n        default: '',\n      },\n    },\n  \n    emits: [\n      'resize',\n      'visible',\n      'hidden',\n      'update',\n      'scroll-start',\n      'scroll-end',\n    ],\n  \n    data () {\n      return {\n        pool: [],\n        totalSize: 0,\n        ready: false,\n        hoverKey: null,\n      }\n    },\n  \n    computed: {\n      sizes () {\n        if (this.itemSize === null) {\n          const sizes = {\n            '-1': { accumulator: 0 },\n          }\n          const items = this.items\n          const field = this.sizeField\n          const minItemSize = this.minItemSize\n          let computedMinSize = 10000\n          let accumulator = 0\n          let current\n          for (let i = 0, l = items.length; i < l; i++) {\n            current = items[i][field] || minItemSize\n            if (current < computedMinSize) {\n              computedMinSize = current\n            }\n            accumulator += current\n            sizes[i] = { accumulator, size: current }\n          }\n          // eslint-disable-next-line\n          this.$_computedMinItemSize = computedMinSize\n          return sizes\n        }\n        return []\n      },\n  \n      simpleArray,\n  \n      itemIndexByKey () {\n        const { keyField, items } = this\n        const result = {}\n        for (let i = 0, l = items.length; i < l; i++) {\n          result[items[i][keyField]] = i\n        }\n        return result\n      },\n    },\n  \n    watch: {\n      items () {\n        this.updateVisibleItems(true)\n      },\n  \n      pageMode () {\n        this.applyPageMode()\n        this.updateVisibleItems(false)\n      },\n  \n      sizes: {\n        handler () {\n          this.updateVisibleItems(false)\n        },\n        deep: true,\n      },\n  \n      gridItems () {\n        this.updateVisibleItems(true)\n      },\n  \n      itemSecondarySize () {\n        this.updateVisibleItems(true)\n      },\n    },\n  \n    created () {\n      this.$_startIndex = 0\n      this.$_endIndex = 0\n      this.$_views = new Map()\n      this.$_unusedViews = new Map()\n      this.$_scrollDirty = false\n      this.$_lastUpdateScrollPosition = 0\n  \n      // In SSR mode, we also prerender the same number of item for the first render\n      // to avoir mismatch between server and client templates\n      if (this.prerender) {\n        this.$_prerender = true\n        this.updateVisibleItems(false)\n      }\n  \n      if (this.gridItems && !this.itemSize) {\n        console.error('[vue-recycle-scroller] You must provide an itemSize when using gridItems')\n      }\n    },\n  \n    mounted () {\n      this.applyPageMode()\n      this.$nextTick(() => {\n        // In SSR mode, render the real number of visible items\n        this.$_prerender = false\n        this.updateVisibleItems(true)\n        this.ready = true\n      })\n    },\n  \n    activated () {\n      const lastPosition = this.$_lastUpdateScrollPosition\n      if (typeof lastPosition === 'number') {\n        this.$nextTick(() => {\n          this.scrollToPosition(lastPosition)\n        })\n      }\n    },\n  \n    beforeUnmount () {\n      this.removeListeners()\n    },\n  \n    methods: {\n      addView (pool, index, item, key, type) {\n        const nr = markRaw({\n          id: uid++,\n          index,\n          used: true,\n          key,\n          type,\n        })\n        const view = shallowReactive({\n          item,\n          position: 0,\n          nr,\n        })\n        pool.push(view)\n        return view\n      },\n  \n      unuseView (view, fake = false) {\n        const unusedViews = this.$_unusedViews\n        const type = view.nr.type\n        let unusedPool = unusedViews.get(type)\n        if (!unusedPool) {\n          unusedPool = []\n          unusedViews.set(type, unusedPool)\n        }\n        unusedPool.push(view)\n        if (!fake) {\n          view.nr.used = false\n          view.position = -9999\n        }\n      },\n  \n      handleResize () {\n        this.$emit('resize')\n        if (this.ready) this.updateVisibleItems(false)\n      },\n  \n      handleScroll (event) {\n        if (!this.$_scrollDirty) {\n          this.$_scrollDirty = true\n          if (this.$_updateTimeout) return\n  \n          const requestUpdate = () => requestAnimationFrame(() => {\n            this.$_scrollDirty = false\n            const { continuous } = this.updateVisibleItems(false, true)\n  \n            // It seems sometimes chrome doesn't fire scroll event :/\n            // When non continous scrolling is ending, we force a refresh\n            if (!continuous) {\n              clearTimeout(this.$_refreshTimout)\n              this.$_refreshTimout = setTimeout(this.handleScroll, this.updateInterval + 100)\n            }\n          })\n  \n          requestUpdate()\n  \n          // Schedule the next update with throttling\n          if (this.updateInterval) {\n            this.$_updateTimeout = setTimeout(() => {\n              this.$_updateTimeout = 0\n              if (this.$_scrollDirty) requestUpdate()\n            }, this.updateInterval)\n          }\n        }\n      },\n  \n      handleVisibilityChange (isVisible, entry) {\n        if (this.ready) {\n          if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n            this.$emit('visible')\n            requestAnimationFrame(() => {\n              this.updateVisibleItems(false)\n            })\n          } else {\n            this.$emit('hidden')\n          }\n        }\n      },\n  \n      updateVisibleItems (checkItem, checkPositionDiff = false) {\n        const itemSize = this.itemSize\n        const gridItems = this.gridItems || 1\n        const itemSecondarySize = this.itemSecondarySize || itemSize\n        const minItemSize = this.$_computedMinItemSize\n        const typeField = this.typeField\n        const keyField = this.simpleArray ? null : this.keyField\n        const items = this.items\n        const count = items.length\n        const sizes = this.sizes\n        const views = this.$_views\n        const unusedViews = this.$_unusedViews\n        const pool = this.pool\n        const itemIndexByKey = this.itemIndexByKey\n        let startIndex, endIndex\n        let totalSize\n        let visibleStartIndex, visibleEndIndex\n  \n        if (!count) {\n          startIndex = endIndex = visibleStartIndex = visibleEndIndex = totalSize = 0\n        } else if (this.$_prerender) {\n          startIndex = visibleStartIndex = 0\n          endIndex = visibleEndIndex = Math.min(this.prerender, items.length)\n          totalSize = null\n        } else {\n          const scroll = this.getScroll()\n  \n          // Skip update if use hasn't scrolled enough\n          if (checkPositionDiff) {\n            let positionDiff = scroll.start - this.$_lastUpdateScrollPosition\n            if (positionDiff < 0) positionDiff = -positionDiff\n            if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\n              return {\n                continuous: true,\n              }\n            }\n          }\n          this.$_lastUpdateScrollPosition = scroll.start\n  \n          const buffer = this.buffer\n          scroll.start -= buffer\n          scroll.end += buffer\n  \n          // account for leading slot\n          let beforeSize = 0\n          if (this.$refs.before) {\n            beforeSize = this.$refs.before.scrollHeight\n            scroll.start -= beforeSize\n          }\n  \n          // account for trailing slot\n          if (this.$refs.after) {\n            const afterSize = this.$refs.after.scrollHeight\n            scroll.end += afterSize\n          }\n  \n          // Variable size mode\n          if (itemSize === null) {\n            let h\n            let a = 0\n            let b = count - 1\n            let i = ~~(count / 2)\n            let oldI\n  \n            // Searching for startIndex\n            do {\n              oldI = i\n              h = sizes[i].accumulator\n              if (h < scroll.start) {\n                a = i\n              } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n                b = i\n              }\n              i = ~~((a + b) / 2)\n            } while (i !== oldI)\n            i < 0 && (i = 0)\n            startIndex = i\n  \n            // For container style\n            totalSize = sizes[count - 1].accumulator\n  \n            // Searching for endIndex\n            for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n            if (endIndex === -1) {\n              endIndex = items.length - 1\n            } else {\n              endIndex++\n              // Bounds\n              endIndex > count && (endIndex = count)\n            }\n  \n            // search visible startIndex\n            for (visibleStartIndex = startIndex; visibleStartIndex < count && (beforeSize + sizes[visibleStartIndex].accumulator) < scroll.start; visibleStartIndex++);\n  \n            // search visible endIndex\n            for (visibleEndIndex = visibleStartIndex; visibleEndIndex < count && (beforeSize + sizes[visibleEndIndex].accumulator) < scroll.end; visibleEndIndex++);\n          } else {\n            // Fixed size mode\n            startIndex = ~~(scroll.start / itemSize * gridItems)\n            const remainer = startIndex % gridItems\n            startIndex -= remainer\n            endIndex = Math.ceil(scroll.end / itemSize * gridItems)\n            visibleStartIndex = Math.max(0, Math.floor((scroll.start - beforeSize) / itemSize * gridItems))\n            visibleEndIndex = Math.floor((scroll.end - beforeSize) / itemSize * gridItems)\n  \n            // Bounds\n            startIndex < 0 && (startIndex = 0)\n            endIndex > count && (endIndex = count)\n            visibleStartIndex < 0 && (visibleStartIndex = 0)\n            visibleEndIndex > count && (visibleEndIndex = count)\n  \n            totalSize = Math.ceil(count / gridItems) * itemSize\n          }\n        }\n  \n        if (endIndex - startIndex > config.itemsLimit) {\n          this.itemsLimitError()\n        }\n  \n        this.totalSize = totalSize\n  \n        let view\n  \n        const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\n  \n        // Unuse views that are no longer visible\n        if (continuous) {\n          for (let i = 0, l = pool.length; i < l; i++) {\n            view = pool[i]\n            if (view.nr.used) {\n              // Update view item index\n              if (checkItem) {\n                view.nr.index = itemIndexByKey[view.item[keyField]]\n              }\n  \n              // Check if index is still in visible range\n              if (\n                view.nr.index == null ||\n                view.nr.index < startIndex ||\n                view.nr.index >= endIndex\n              ) {\n                this.unuseView(view)\n              }\n            }\n          }\n        }\n  \n        const unusedIndex = continuous ? null : new Map()\n  \n        let item, type\n        let v\n        for (let i = startIndex; i < endIndex; i++) {\n          item = items[i]\n          const key = keyField ? item[keyField] : item\n          if (key == null) {\n            throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\n          }\n          view = views.get(key)\n  \n          if (!itemSize && !sizes[i].size) {\n            if (view) this.unuseView(view)\n            continue\n          }\n  \n          type = item[typeField]\n  \n          let unusedPool = unusedViews.get(type)\n          let newlyUsedView = false\n  \n          // No view assigned to item\n          if (!view) {\n            if (continuous) {\n              // Reuse existing view\n              if (unusedPool && unusedPool.length) {\n                view = unusedPool.pop()\n              } else {\n                view = this.addView(pool, i, item, key, type)\n              }\n            } else {\n              // Use existing view\n              // We don't care if they are already used\n              // because we are not in continous scrolling\n              v = unusedIndex.get(type) || 0\n  \n              if (!unusedPool || v >= unusedPool.length) {\n                view = this.addView(pool, i, item, key, type)\n                this.unuseView(view, true)\n                unusedPool = unusedViews.get(type)\n              }\n  \n              view = unusedPool[v]\n              unusedIndex.set(type, v + 1)\n            }\n  \n            // Assign view to item\n            views.delete(view.nr.key)\n            view.nr.used = true\n            view.nr.index = i\n            view.nr.key = key\n            view.nr.type = type\n            views.set(key, view)\n  \n            newlyUsedView = true\n          } else {\n            // View already assigned to item\n            if (!view.nr.used) {\n              view.nr.used = true\n              newlyUsedView = true\n              if (unusedPool) {\n                const index = unusedPool.indexOf(view)\n                if (index !== -1) unusedPool.splice(index, 1)\n              }\n            }\n          }\n  \n          // Always set item in case it's a new object with the same key\n          view.item = item\n  \n          if (newlyUsedView) {\n            if (i === items.length - 1) this.$emit('scroll-end')\n            if (i === 0) this.$emit('scroll-start')\n          }\n  \n          // Update position\n          if (itemSize === null) {\n            view.position = sizes[i - 1].accumulator\n            view.offset = 0\n          } else {\n            view.position = Math.floor(i / gridItems) * itemSize\n            view.offset = (i % gridItems) * itemSecondarySize\n          }\n        }\n  \n        this.$_startIndex = startIndex\n        this.$_endIndex = endIndex\n  \n        if (this.emitUpdate) this.$emit('update', startIndex, endIndex, visibleStartIndex, visibleEndIndex)\n  \n        // After the user has finished scrolling\n        // Sort views so text selection is correct\n        clearTimeout(this.$_sortTimer)\n        this.$_sortTimer = setTimeout(this.sortViews, this.updateInterval + 300)\n  \n        return {\n          continuous,\n        }\n      },\n  \n      getListenerTarget () {\n        let target = getScrollParent(this.$el)\n        // Fix global scroll target for Chrome and Safari\n        if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n          target = window\n        }\n        return target\n      },\n  \n      getScroll () {\n        const { $el: el, direction } = this\n        const isVertical = direction === 'vertical'\n        let scrollState\n  \n        if (this.pageMode) {\n          const bounds = el.getBoundingClientRect()\n          const boundsSize = isVertical ? bounds.height : bounds.width\n          let start = -(isVertical ? bounds.top : bounds.left)\n          let size = isVertical ? window.innerHeight : window.innerWidth\n          if (start < 0) {\n            size += start\n            start = 0\n          }\n          if (start + size > boundsSize) {\n            size = boundsSize - start\n          }\n          scrollState = {\n            start,\n            end: start + size,\n          }\n        } else if (isVertical) {\n          scrollState = {\n            start: el.scrollTop,\n            end: el.scrollTop + el.clientHeight,\n          }\n        } else {\n          scrollState = {\n            start: el.scrollLeft,\n            end: el.scrollLeft + el.clientWidth,\n          }\n        }\n  \n        return scrollState\n      },\n  \n      applyPageMode () {\n        if (this.pageMode) {\n          this.addListeners()\n        } else {\n          this.removeListeners()\n        }\n      },\n  \n      addListeners () {\n        this.listenerTarget = this.getListenerTarget()\n        this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive\n          ? {\n              passive: true,\n            }\n          : false)\n        this.listenerTarget.addEventListener('resize', this.handleResize)\n      },\n  \n      removeListeners () {\n        if (!this.listenerTarget) {\n          return\n        }\n  \n        this.listenerTarget.removeEventListener('scroll', this.handleScroll)\n        this.listenerTarget.removeEventListener('resize', this.handleResize)\n  \n        this.listenerTarget = null\n      },\n  \n      scrollToItem (index) {\n        let scroll\n        const gridItems = this.gridItems || 1\n        if (this.itemSize === null) {\n          scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\n        } else {\n          scroll = Math.floor(index / gridItems) * this.itemSize\n        }\n        this.scrollToPosition(scroll)\n      },\n  \n      scrollToPosition (position) {\n        const direction = this.direction === 'vertical'\n          ? { scroll: 'scrollTop', start: 'top' }\n          : { scroll: 'scrollLeft', start: 'left' }\n  \n        let viewport\n        let scrollDirection\n        let scrollDistance\n  \n        if (this.pageMode) {\n          const viewportEl = getScrollParent(this.$el)\n          // HTML doesn't overflow like other elements\n          const scrollTop = viewportEl.tagName === 'HTML' ? 0 : viewportEl[direction.scroll]\n          const bounds = viewportEl.getBoundingClientRect()\n  \n          const scroller = this.$el.getBoundingClientRect()\n          const scrollerPosition = scroller[direction.start] - bounds[direction.start]\n  \n          viewport = viewportEl\n          scrollDirection = direction.scroll\n          scrollDistance = position + scrollTop + scrollerPosition\n        } else {\n          viewport = this.$el\n          scrollDirection = direction.scroll\n          scrollDistance = position\n        }\n  \n        viewport[scrollDirection] = scrollDistance\n      },\n  \n      itemsLimitError () {\n        setTimeout(() => {\n          console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\n          console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\n        })\n        throw new Error('Rendered items limit reached')\n      },\n  \n      sortViews () {\n        this.pool.sort((viewA, viewB) => viewA.nr.index - viewB.nr.index)\n      },\n    },\n  }\n  </script>\n  \n  <style>\n  .vue-recycle-scroller {\n    position: relative;\n  }\n  \n  .vue-recycle-scroller.direction-vertical:not(.page-mode) {\n    overflow-y: auto;\n  }\n  \n  .vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n    overflow-x: auto;\n  }\n  \n  .vue-recycle-scroller.direction-horizontal {\n    display: flex;\n  }\n  \n  .vue-recycle-scroller__slot {\n    flex: auto 0 0;\n  }\n  \n  .vue-recycle-scroller__item-wrapper {\n    flex: 1;\n    box-sizing: border-box;\n    overflow: hidden;\n    position: relative;\n  }\n  \n  .vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n    position: absolute;\n    top: 0;\n    left: 0;\n    will-change: transform;\n  }\n  \n  .vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\n    width: 100%;\n  }\n  \n  .vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\n    height: 100%;\n  }\n  \n  .vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\n    width: 100%;\n  }\n  \n  .vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\n    height: 100%;\n  }\n  </style>"],"sourceRoot":"src/uiComponents/SpherePhoneNumberInput/assets"}]}