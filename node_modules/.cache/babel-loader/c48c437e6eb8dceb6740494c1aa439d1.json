{"remainingRequest":"/home/vignesh/DIVRT/Revamp/node_modules/babel-loader/lib/index.js!/home/vignesh/DIVRT/Revamp/node_modules/eslint-loader/index.js??ref--13-0!/home/vignesh/DIVRT/Revamp/src/api.js","dependencies":[{"path":"/home/vignesh/DIVRT/Revamp/src/api.js","mtime":1688551955679},{"path":"/home/vignesh/DIVRT/Revamp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/Revamp/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/vignesh/DIVRT/Revamp/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/vignesh/DIVRT/Revamp/src/api.js"],"names":["apiHelper","addCard","data","bid","getBookingState","extendReservation","getRate","getPedestrianAccess","source","qrCheckout","validateBooking","getZoneDetails","searchParamKey","searchParamValue","createHostPass","prepaidOpenTransaction","prepaidAddCard","getOnDemandZoneDetails","createSession","findBooking","modifyLPR","disassociateCard","reEnter"],"mappings":"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","sourcesContent":["import apiHelper from \"./apiHelper\";\n\n/**\n * All declarations\n * @param {*} data is request data received from each API call.\n * @returns response\n */\nconst addCard = async (data, bid) => {\n    return await apiHelper(\"POST\", \"/api/v1/payment/addCard/\" + bid, data);\n};\n\nconst getBookingState = async (bid) => {\n    return await apiHelper(\"GET\", \"/api/v1/booking/config/\" + bid)\n};\n\nconst extendReservation = async (data) => {\n    return await apiHelper(\"POST\", \"/api/v1/prepaid/extendReservation\", data)\n}\n\nconst getRate = async (data) => {\n    return await apiHelper(\"POST\", \"/api/v2/getRate\", data)\n}\nconst getPedestrianAccess = async (bid, source) => {\n    return await apiHelper(\"POST\", \"api/v1/open/\" + bid,\n        { source: source })\n}\nconst qrCheckout = async (data, bid) => {\n    return await apiHelper(\n        \"POST\",\n        \"/api/v1/checkout/\" + bid,\n        data\n    )\n}\nconst validateBooking = async (data, bid) => { return await apiHelper(\"POST\", \"/api/v1/validate/\" + bid, data) }\n\nconst getZoneDetails = async (searchParamKey, searchParamValue) => {\n    return await apiHelper(\n        \"GET\",\n        \"/api/v1/user/config\" + searchParamKey + \"=\" + searchParamValue\n    );\n}\n\nconst createHostPass = async (data) => {\n    return await apiHelper(\n        \"POST\",\n        \"api/v2/merchant/createReservation\",\n        data\n    )\n}\n\nconst prepaidOpenTransaction = async (data) => {\n    return await apiHelper(\"POST\", \"/api/v1/prepaid/openTransaction\", data)\n\n}\nconst prepaidAddCard = async (data) => {\n    return await apiHelper(\"POST\", \"/api/v1/prepaid/addCard\", data)\n}\nconst getOnDemandZoneDetails = async (searchParamValue) => {\n    return await apiHelper(\n        \"GET\",\n        \"/api/v1/getOnDemand/\" + searchParamValue\n    )\n}\nconst createSession = async (data) => {\n    return await apiHelper(\"POST\", \"/api/v1/addBooking\", data)\n}\nconst findBooking = async (data) => {\n    return await apiHelper(\n        \"POST\",\n        \"/api/v1/findBooking\",\n        data\n    )\n}\n\nconst modifyLPR = async (data, bid) => {\n    return await apiHelper(\n        \"PATCH\",\n        \"/api/v1/modifyLPR/\" + bid,\n        data\n    )\n}\n\nconst disassociateCard = async (data) => {\n    return await apiHelper(\"POST\", \"/api/v1/disassociateCard\", data)\n}\n\nconst reEnter = async (bid) => {\n    return await apiHelper(\n        \"GET\",\n        \"/api/v1/booking/config/\" + bid + \"?reEnter=1\"\n    )\n}\n/**\n * export declarations\n */\nexport default {\n    prepaidAddCard, reEnter, disassociateCard, modifyLPR, findBooking, createSession, getOnDemandZoneDetails, prepaidOpenTransaction, createHostPass, getZoneDetails, validateBooking, qrCheckout, getPedestrianAccess, getRate, extendReservation, getBookingState, addCard\n\n}"]}]}