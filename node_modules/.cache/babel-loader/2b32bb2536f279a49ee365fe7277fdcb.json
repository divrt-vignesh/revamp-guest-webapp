{"remainingRequest":"/home/vignesh/DIVRT/guest-webapp/node_modules/thread-loader/dist/cjs.js!/home/vignesh/DIVRT/guest-webapp/node_modules/babel-loader/lib/index.js!/home/vignesh/DIVRT/guest-webapp/node_modules/eslint-loader/index.js??ref--13-0!/home/vignesh/DIVRT/guest-webapp/src/apiHelper.js","dependencies":[{"path":"/home/vignesh/DIVRT/guest-webapp/src/apiHelper.js","mtime":1673262692522},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/vignesh/DIVRT/guest-webapp/src/apiHelper.js"],"names":["API","processRequest","reqType","url","data","apiGetRequest","apiGetResponse","console","log","apiPostRequest","apiPostResponse","apiPutRequest","apiPutResponse","apiPatchRequest","apiPatchResponse","apiDeleteRequest","apiDeleteResponse","get","post","delete","put","patch"],"mappings":"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","sourcesContent":["import API from './api';\n\n// import axiosHelper from 'axiosHelper'\nconst processRequest = async (reqType, url, data) => {\n  switch (reqType) {\n    case 'GET':\n      try {\n        var apiGetResponse = await apiGetRequest(url, data);\n        return apiGetResponse;\n      } catch (error) {\n        console.log(error);\n      }\n      break;\n    case 'POST':\n      try {\n        var apiPostResponse = await apiPostRequest(url, data);\n        return apiPostResponse;\n      } catch (error) {\n        console.log(error);\n      }\n      break;\n    case 'PUT':\n      try {\n        var apiPutResponse = await apiPutRequest(url, data);\n        return apiPutResponse;\n      } catch (error) {\n        console.log(error);\n      }\n      break;\n      case 'PATCH':\n        try {\n          var apiPatchResponse = await apiPatchRequest(url, data);\n          return apiPatchResponse;\n        } catch (error) {\n          console.log(error);\n        }\n        break;\n    case 'DELETE':\n      try {\n        var apiDeleteResponse = await apiDeleteRequest(url, data);\n        return apiDeleteResponse;\n      } catch (error) {\n        console.log(error);\n      }\n      break;\n  }\n};\nconst apiGetRequest = async (url, data) => {\n  try {\n    return API.get(url, data);\n  } catch (error) {\n    return error\n  }\n};\n\nconst apiPostRequest = async (url, data) => {\n  try {\n    return API.post(url, data)\n  } catch (error) {\n    return error\n  }\n};\n\nconst apiDeleteRequest = async (url, data) => {\n  try {\n    return API.delete(url, data)\n  } catch (error) {\n    return error\n  }\n};\n\nconst apiPutRequest = async (url, data) => {\n  try {\n    return API.put(url, data)\n  } catch (error) {\n    return error\n  }\n};\n\nconst apiPatchRequest = async (url, data) => {\n  try {\n    return API.patch(url, data)\n  } catch (error) {\n    return error\n  }\n};\n\nexport default processRequest;"]}]}