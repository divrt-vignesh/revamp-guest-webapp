{"remainingRequest":"/home/vignesh/DIVRT/guest-webapp/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/vignesh/DIVRT/guest-webapp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vignesh/DIVRT/guest-webapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vignesh/DIVRT/guest-webapp/src/uiComponents/SpherePhoneNumberInput/VuePhoneNumberInput/CountrySelector/index.vue?vue&type=template&id=b9666922&scoped=true&","dependencies":[{"path":"/home/vignesh/DIVRT/guest-webapp/src/uiComponents/SpherePhoneNumberInput/VuePhoneNumberInput/CountrySelector/index.vue","mtime":1686822070011},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}