{"remainingRequest":"/home/vignesh/DIVRT/revamp-guest-webapp/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/vignesh/DIVRT/revamp-guest-webapp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vignesh/DIVRT/revamp-guest-webapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vignesh/DIVRT/revamp-guest-webapp/src/uiComponents/SpherePhoneNumberInput/VuePhoneNumberInput/InputTel/index.vue?vue&type=template&id=248ffca6&scoped=true&","dependencies":[{"path":"/home/vignesh/DIVRT/revamp-guest-webapp/src/uiComponents/SpherePhoneNumberInput/VuePhoneNumberInput/InputTel/index.vue","mtime":1688551741180},{"path":"/home/vignesh/DIVRT/revamp-guest-webapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/revamp-guest-webapp/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/revamp-guest-webapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/revamp-guest-webapp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}