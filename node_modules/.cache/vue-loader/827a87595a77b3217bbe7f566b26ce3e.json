{"remainingRequest":"/home/vignesh/DIVRT/revamp-guest-webapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vignesh/DIVRT/revamp-guest-webapp/src/views/information/CreateView.vue?vue&type=style&index=0&id=517af73e&scoped=true&lang=css&","dependencies":[{"path":"/home/vignesh/DIVRT/revamp-guest-webapp/src/views/information/CreateView.vue","mtime":1688985113997},{"path":"/home/vignesh/DIVRT/revamp-guest-webapp/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/revamp-guest-webapp/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/revamp-guest-webapp/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/revamp-guest-webapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/revamp-guest-webapp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmRhdGUtdGV4dCB7CiAgICBmb250LXNpemU6IDE1cHggIWltcG9ydGFudDsKICAgIGZvbnQtd2VpZ2h0OiA3MDAgIWltcG9ydGFudDsKfQo="},{"version":3,"sources":["CreateView.vue"],"names":[],"mappingsiCA;AACA;AACA;AACA","file":"CreateView.vue","sourceRoot":"src/views/information","sourcesContent":["<template>\n    <v-container fluid pa-0>\n        <v-dialog v-model=\"loading\" persistent>\n            <v-card class=\"pa-4\">\n                <v-progress-circular indeterminate color=\"red\"></v-progress-circular>\n                <span class=\"ml-4\" style=\"font-size: 14px\">Please wait...</span>\n            </v-card>\n        </v-dialog>\n        <boiler-plate>\n            <div class=\"parking-values \">\n                <v-container pa-0 class=\"text-center\">\n                    <v-row no-gutters class=\"location-values \">\n                        <v-col cols=\"12\" class=\" pb-0\">\n                            <v-container pl-10>\n                                <p class=\"welcome text-start\">Welcome to</p>\n                                <p class=\"location text-start\">{{ zoneName }}</p>\n                            </v-container>\n                        </v-col>\n                    </v-row>\n                </v-container>\n            </div>\n            <v-container fluid class=\"text-center px-10\" elevation=\"20\">\n                <v-card  class=\"dialog-card\">\n                    <v-card-text>\n                        <v-container>\n                            <v-form>\n                                <v-row no-gutters>\n                                    <v-col class=\"text-left mb-5\">\n                                        <span style=\"font-weight: 700;font-size: 14px; \">Your Information</span>\n                                    </v-col>\n                                </v-row>\n                                <v-row no-gutters class=\"mb-5\">\n                                    <v-col cols=\"12\" v-if=\"!edtPhoneInput\">\n                                        <sphere-phone-number-input v-model=\"contactObj.phoneNumber\" size=\"md\"\n                                            @update=\"onContactInput\" show-code-on-list\n                                            :default-country-code=\"contactOptions.defaultCountry\"\n                                            :disabled=\"contactDisabled\" :color=\"contactOptions.color\"\n                                            :valid-color=\"contactOptions.validColor\"\n                                            :error-color=\"contactOptions.errorColor\"\n                                            :border-radius=\"contactOptions.contactBorderRadius\" :error=\"!isContactValid\"\n                                            required\n                                            :translations=\"contactOptions.translations\"></sphere-phone-number-input>\n                                    </v-col>\n                                    <v-col cols=\"11\" v-if=\"edtPhoneInput\">\n                                        <v-text-field v-model=\"contactObj.phoneNumber\" disabled oulined></v-text-field>\n                                    </v-col>\n                                    <v-col cols=\"1\"> </v-col>\n                                    <v-col cols=\"11\" v-if=\"!isPQREndReservation\">\n                                        <span style=\"font-size: 10px; line-height: 1.5\">Phone number is mandatory for\n                                            generating\n                                            the\n                                            receipt</span>\n                                    </v-col>\n                                </v-row>\n                                <v-row no-gutters class=\"mb-3\">\n                                    <v-col>\n                                        <v-text-field class=\"pt-0\" v-model=\"licencePlate\" hide-details=\"auto\" maxlength=\"8\"\n                                            dense outlined :rules=\"[rules.alphaNumeric]\" @keyup=\"uppercase\"\n                                            label=\"License Plate *\" clearable>\n\n                                        </v-text-field>\n                                    </v-col>\n                                </v-row>\n                                <v-row no-gutters>\n                                    <v-col cols=\"12\" class=\"text-left pb-1\" style=\"font-size: 10px;font-weight: 300;\">\n                                        <p class=\"mb-0\" v-if=\"zoneDetails.lpr_status == '1'\">\n                                            Enter your license plate and phone number for hassle-free\n                                            parking\n                                        </p>\n                                        <p class=\"mb-0\" v-else>\n                                            Enter your phone number for hassle-free parking\n                                        </p>\n                                    </v-col>\n\n                                </v-row>\n                                <v-row no-gutters v-if=\"isPQREndReservation\">\n                                    <v-col cols=\"12\">\n                                        <v-row no-gutters class=\" text-left pa-0 mb-0\">\n                                            <v-col cols=\"12\">\n                                                <p style=\"font-weight: 700;color: #3D4C56;margin-bottom: 3px;\">\n                                                    Set Your Exit Date <span\n                                                        v-if=\"isPQREndReservation && Object.hasOwnProperty.call(zoneDetails, 'timePickerConfiguration') && zoneDetails.timePickerConfiguration == '1'\">and\n                                                        Time</span>\n                                                </p>\n                                                <p class=\"text-left ma-0\"\n                                                    style=\"color: #6F6F6F;font-size: 10px; font-weight: 300; \"\n                                                    v-if=\"isPQREndReservation\">\n                                                    If you're a hotel guest, this is your checkout date.\n                                                </p>\n                                            </v-col>\n                                        </v-row>\n                                        <v-row no-gutters>\n                                            <v-col cols=\"12\" class=\" text-center color-black\" style=\"font-size: 12px\">\n\n                                                <v-row no-gutters class=\"py-2\">\n\n                                                    <v-col cols=\"12\">\n                                                        <v-text-field v-model=\"computedDateFormatted\" outlined dense\n                                                            class=\"date-text\" @click=\"() => { openDatePicker = true }\"\n                                                            hide-details=\"auto\" readonly>\n                                                            <template v-slot:prepend-inner>\n                                                                <v-icon class=\"material-icons-outlined\"\n                                                                    color=\"#3D4C56\">calendar_today</v-icon>\n                                                                <v-divider color=\"grey\" vertical\n                                                                    class=\"ml-3 mr-3\"></v-divider>\n                                                            </template>\n                                                        </v-text-field>\n                                                        <v-dialog v-model=\"openDatePicker\" max-width=\"450px\">\n                                                            <v-card\n                                                                style=\"background-color: #F2555C;color: white;\"><v-card-title>\n                                                                    <v-row no-gutters>\n                                                                        <v-col class=\"text-left\" cols=\"12\">\n                                                                            <span style=\"font-size:15px;color: #fabbbe;\">{{\n                                                                                time\n                                                                                !== null && time !== \"\" ?\n                                                                                formattedYear : \"\" }}</span>\n                                                                        </v-col>\n                                                                        <v-col>\n                                                                            <span style=\"font-size:30px\"> {{ time !== null\n                                                                                &&\n                                                                                time !== \"\" ? formattedDateTime :\n                                                                                \"\"\n                                                                            }}</span>\n                                                                        </v-col>\n                                                                    </v-row>\n                                                                </v-card-title></v-card>\n                                                            <Calendar inline class=\"text-left\" value :stepMinute=\"15\"\n                                                                hourFormat=\"12\" :minDate=\"minTimeDate\"\n                                                                @date-select=\"onTimePickerChange\" :maxDate=\"maxTimeDate\"\n                                                                v-model=\"time\" />\n                                                        </v-dialog>\n                                                    </v-col>\n                                                </v-row>\n                                                <v-row no-gutters class=\"pt-2\"\n                                                    v-if=\"Object.hasOwnProperty.call(zoneDetails, 'timePickerConfiguration') && zoneDetails.timePickerConfiguration == '1'\">\n                                                    <v-col cols=\"12\">\n                                                        <v-row no-gutters class=\"pb-0\">\n                                                            <v-col class=\"pb-0\">\n                                                                <v-text-field class=\"date-text\" v-model=\"formattedTime\"\n                                                                    dense outlined @click=\"() => {\n                                                                        openTimePicker = true;\n                                                                    }\" readonly>\n                                                                    <template v-slot:prepend-inner>\n                                                                        <v-icon class=\"material-icons-outlined\"\n                                                                            color=\"#3D4C56\">schedule</v-icon>\n                                                                        <v-divider color=\"grey\" vertical\n                                                                            class=\"ml-3 mr-3\"></v-divider>\n                                                                    </template>\n                                                                </v-text-field>\n                                                                <v-dialog v-model=\"openTimePicker\" max-width=\"300px\"\n                                                                    @click:outside=\"() => { setDefaultDate(); onTimePickerChange() }\">\n                                                                    <v-card\n                                                                        style=\"background-color: #F2555C;color: white;\"><v-card-title>What\n                                                                            time will you\n                                                                            exit?</v-card-title></v-card>\n                                                                    <Calendar inline time-only show-time class=\"text-left \"\n                                                                        value :stepMinute=\"15\" hourFormat=\"12\"\n                                                                        :minDate=\"minTimeDate\" :maxDate=\"maxTimeDate\"\n                                                                        v-model=\"time\" />\n                                                                </v-dialog>\n                                                            </v-col>\n                                                        </v-row>\n                                                    </v-col>\n                                                </v-row>\n                                                <v-row class=\"text-left mt-0  py-0 pb-3\">\n                                                    <v-col class=\"pt-0\">\n                                                        <p style=\"\n                                                    font-size: 10px; \n                                                    font-weight: 700;\n                              color: #3D4C56;\n                              line-height: 13px;\n                            \" class=\"ma-0\">\n                                                            HOURS OF OPERATION\n                                                        </p>\n                                                        <p class=\"ma-0\" style=\"font-size: 9px; \">\n                                                            Today :\n                                                            {{\n                                                                onDemandZoneDetails.hasOwnProperty(\n                                                                    \"todaysHoursOfOperation\"\n                                                                ) &&\n                                                                onDemandZoneDetails.todaysHoursOfOperation.hasOwnProperty(\n                                                                    \"is24HourOpen\"\n                                                                ) &&\n                                                                onDemandZoneDetails.todaysHoursOfOperation\n                                                                    .is24HourOpen == true\n                                                                ? \"Open 24 / 7\"\n                                                                : \"\"\n                                                            }}\n                                                        </p>\n                                                    </v-col>\n                                                </v-row>\n                                            </v-col>\n                                        </v-row>\n                                        <v-row no-gutters class=\" information pa-0\" v-if=\"estimate != null && Object.keys(estimate).length != 0\n                                                \">\n                                            <v-col cols=\"10\" class=\"text-left\">\n                                                <p style=\"color: #3D4C56; font-weight: bolder\">\n                                                    Your Parking Fees\n                                                </p>\n                                            </v-col>\n                                        </v-row>\n\n                                        <Estimate :singleQuotes=\"singleQuotes\" :doubleQuotes=\"doubleQuotes\"\n                                            :estimate=\"estimate\" :beforeEstimate=\"beforeEstimate\"\n                                            :formattedEntryDisplayTime=\"formattedEntryDisplayTime\"></Estimate>\n                                    </v-col>\n                                </v-row>\n                            </v-form>\n                        </v-container>\n                        <v-card-actions class=\"\">\n                            <v-container class=\"pa-0 text-center\" v-if=\"isPQREndReservation\">\n                                <v-row no-gutters>\n                                    <v-col cols=\"12\">\n                                        <v-btn class=\"add_licence_plate_btn\" width=\"100%\" :disabled=\"disableSubmitBtn\"\n                                            :loading=\"addPaymentBtnLoading\" @click=\"addPayment\">Add\n                                            Payment</v-btn>\n                                    </v-col>\n                                </v-row>\n                                <v-row no-gutters>\n                                    <v-col cols=\"12\" class=\"px-2 mt-4\">\n                                        <v-btn rounded elevation=\"20\" width=\"50%\" class=\"white--text\" color=\"primary\"\n                                            v-if=\"this.casinoDetails.userDetail.bid\" @click=\"reloadBooking\">Cancel</v-btn>\n                                    </v-col>\n                                </v-row>\n                            </v-container>\n                            <v-container class=\"pa-0\" fluid v-else>\n                                <v-row no-gutters>\n                                    <v-col cols=\"12\" class=\"px-2\">\n                                        <v-btn width=\"100%\" class=\"add_licence_plate_btn \"\n                                            :loading=\"addLicencePlateBtnLoading\" :disabled=\"disableAddLicencePlateBtn\"\n                                            @click=\"createSession()\">{{\n                                                reEnterPlate ? \"Confirm\" : \"Continue\" }}</v-btn>\n                                    </v-col>\n                                </v-row>\n                                <v-row no-gutters>\n                                    <v-col cols=\"12\" class=\"mt-2 text-center color-black px-2\" style=\"font-size: 12px\">\n                                        <p class=\"mb-0\" v-show=\"reEnterPlate\">\n                                            Please provide correct license plate and phone number.\n                                            Without one, you could be subject to a parking violation and\n                                            issued a citation.\n                                        </p>\n                                        <p class=\"mb-0\">\n                                            A valid credit card is required to park. Without one, you\n                                            could be subject to a parking violation and issued a\n                                            citation.\n                                        </p>\n                                    </v-col>\n                                </v-row>\n                            </v-container>\n                        </v-card-actions>\n                    </v-card-text>\n\n                </v-card>\n            </v-container>\n            <footer>\n                <v-row class=\"text-center parking.com pb-3\" no-gutters>\n                    <v-col cols=\"12\">\n                        <v-img alt=\"PARKING.COM\" class=\"my-3\" height=\"42\" contain src=\"@/assets/logo_huge_drk.png\" />\n                    </v-col>\n                </v-row>\n            </footer>\n            <v-dialog v-model=\"confirmCreateSessionDialog\" max-width=\"fit-content\">\n                <v-card class=\"pa-0\">\n                    <v-card-title class=\"justify-center\">\n                        <v-icon x-large color=\"red accent-2\">mdi-alert-outline</v-icon>\n                    </v-card-title>\n                    <v-card-text class=\"text-center mt-5\" style=\"font-size: 15px\">\n                        <span v-html=\"errMsg\"></span>\n                    </v-card-text>\n                    <v-card-actions class=\"text-center pb-6\">\n                        <v-container pa-0 fluid>\n                            <v-row no-gutters>\n                                <v-col cols=\"12\">\n                                    <v-btn rounded block elevation=\"0\" class=\"white--text exit_dialog_btn\"\n                                        @click=\"setReenterPlateFlag\">OK</v-btn>\n                                </v-col>\n                            </v-row>\n                        </v-container>\n                    </v-card-actions>\n                </v-card>\n            </v-dialog>\n        </boiler-plate>\n\n    </v-container>\n</template>\n<script>\n// import Vue from \"vue\";\nimport Estimate from '@/components/Estimate.vue';\nimport API from '@/api';\nimport Calendar from '@/uiComponents/Calendar/Calendar.vue'\nimport { EventBus } from \"@/lib/EventBus\";\nimport { mapGetters } from \"vuex\";\nimport { addMinutes, addDays, addHours } from \"date-fns\";\nimport { format, isValid } from \"date-fns\";\nimport \"primevue/resources/themes/saga-blue/theme.css\"       //theme\nimport \"primevue/resources/primevue.min.css\"                 //core css\nimport \"primeicons/primeicons.css\"                           //icons\nimport { dateToTimeZoneDate } from \"@/utils/formatDateTime\";\n// import axios from \"axios\";\nimport SpherePhoneNumberInput from '@/uiComponents/SpherePhoneNumberInput/VuePhoneNumberInput'\n// import VuePhoneNumberInput from \"vue-phone-number-input\";\n// import \"vue-phone-number-input/dist/vue-phone-number-input.css\";\n// import moment from \"moment\";\n// Vue.use(moment);\nimport rules from \"@/utils/rules\";\nexport default {\n    data: () => ({\n        date: \"\",\n        time: \"\",\n        openTimePicker: false,\n        openDatePicker: false,\n        minTimeDate: null,\n        maxTimeDate: null,\n        // isPQREndReservation: true,\n        currentDate: format(new Date(), 'yyyy-MM-dd'),\n        edtEntryTime: null,\n        edtPhoneInput: false,\n        contactDisabled: false,\n        selectedPlate: \"\",\n        reEnterPlate: false,\n        edtBid: null,\n        confirmCreateSessionDialog: false,\n        addLicencePlateBtnLoading: false,\n        errDialog: false,\n        errMsg: \"\",\n        alertDialog: false,\n        alertMsg: \"\",\n        stopTime: \"\",\n        exitTimeSelected: {},\n        timePickerHrRange: null,\n        timeExceeded: false,\n        timePickerMinRange: null,\n\n        disableAddPaymentBtn: false,\n        maxDateTime: null,\n        getRateCall: false,\n        getRateText: \"\",\n        Timemenu: false,\n        startDate: \"\",\n        estimate: null,\n        beforeEstimate: null,\n        Datemenu: false,\n        exitDate: null,\n        dateFormatted: null,\n        rules: rules,\n        isContactValid: true,\n        licencePlate: \"\",\n        contactObj: {},\n        loading: false,\n        contactOptions: {\n            color: \"#0288D1\",\n            validColor: \"#0288D1\",\n            contactBorderRadius: 0,\n            errorColor: \"#FF5252\",\n            defaultCountry: \"US\",\n            translations: {\n                phoneNumberLabel: \"Contact No\",\n            },\n        },\n        addPaymentBtnLoading: false,\n    }),\n    components: {\n        // VuePhoneNumberInput,\n        Calendar, Estimate, SpherePhoneNumberInput\n    },\n    beforeRouteEnter(to, from, next) {\n        next(async (vm) => {\n            const params = new URLSearchParams(window.location.search)\n            let searchParamKey = params.has('zcode') !== null ? '?zcode' : params.has('gateId') !== null ? '?gateId' : \"\";\n            let searchParamValue = params.has('zcode') !== null ? params.get('zcode') : params.has('gateId') !== null ? params.get('gateId') : \"\";\n            switch (searchParamKey) {\n                case \"?zcode\":\n                    await vm.getZoneDetails(searchParamKey, searchParamValue);\n                    if (vm.isPQREndReservation) {\n                        await vm.getOnDemandZoneDetails(searchParamValue);\n                    }\n                    break;\n                case \"?gateid\":\n                    //await self.getZoneDetails(searchParamKey, searchParamValue);\n                    break;\n            }\n            if (vm.isPQREndReservation) {\n                vm.contactObj =\n                    vm.casinoDetails != null &&\n                        Object.hasOwnProperty.call(vm.casinoDetails, \"userDetail\") &&\n                        Object.hasOwnProperty.call(vm.casinoDetails?.userDetail, \"contact\") &&\n                        vm.casinoDetails?.userDetail?.contact != undefined &&\n                        vm.casinoDetails?.userDetail?.contact != null\n                        ? Object.assign(vm.contactObj, {\n                            countryCode:\n                                vm.casinoDetails?.userDetail?.contact.slice(0, -10) == \"+91\"\n                                    ? \"IN\"\n                                    : vm.casinoDetails?.userDetail?.contact.slice(0, -10) ==\n                                        \"+1\"\n                                        ? \"US\"\n                                        : \"\",\n                            phoneNumber: vm.casinoDetails?.userDetail?.contact,\n                            formattedNumber: \"+\" + vm.casinoDetails.userDetail.contact,\n                        })\n                        : {};\n                vm.licencePlate = vm.casinoDetails?.userDetail.plate\n                    ? vm.casinoDetails?.userDetail.plate\n                    : \"\";\n                if (window.location.href.includes('bid')) {\n                    let hrefParams = window.location.href.split('createsession');\n                    let paramArray = hrefParams[1].split('&')\n                    let phoneParam = paramArray.length >= 1 ? paramArray[0].split('=')[1] : \"\";\n                    let bidParam = paramArray.length >= 2 ? paramArray[1].split('=')[1] : \"\";\n                    let plateParam = paramArray.length >= 3 ? paramArray[2].split('=')[1] : \"\";\n                    let entrytimeparam = paramArray.length >= 4 ? paramArray[3].split('=')[1] : \"\";          // vm.contactObj.phoneNumber = phoneParam;\n                    vm.edtEntryTime = entrytimeparam != null && entrytimeparam !== \"\" && entrytimeparam != undefined ? format(new Date(vm.formatExitDateTime(entrytimeparam, 'date')), \"yyyy-MM-dd'T'HH:mm:ss\") : format(dateToTimeZoneDate(new Date(), vm.zoneDetails.timezone), \"yyyy-MM-dd'T'HH:mm:ss\")\n                    vm.licencePlate = plateParam;\n                    vm.edtBid = bidParam;\n                    let guestContact = phoneParam ? {\n                        countryCode:\n                            phoneParam.slice(0, -10) == \"91\"\n                                ? \"IN\"\n                                : phoneParam.slice(0, -10) == \"1\"\n                                    ? \"US\"\n                                    : \"\",\n                        phoneNumber: phoneParam,\n                        formattedNumber: \"+\" + phoneParam,\n                    } : vm.contactObj;\n                    if (phoneParam !== \"\" && phoneParam !== null && phoneParam != undefined) {\n                        vm.edtPhoneInput = true;\n                        vm.contactObj = Object.assign({}, guestContact);\n                        vm.contactDisabled = true;\n                        vm.contactObj.isValid = true;\n                    }\n                    let commitData = {\n                        plate: vm.licencePlate,\n                        contact: vm.contactObj?.formattedNumber,\n                        bid: vm.edtBid,\n                        entrytime: vm.edtEntryTime,\n                        edtParams: hrefParams[1]\n                    }\n                    vm.$store.commit(\"SET_CASINO_USERDETAILS\", commitData);\n                    vm.$store.commit(\"SET_TEMPLATE_FLAGS\", 'atlantic-flag');\n\n                }\n            }\n            else {\n                vm.edtPhoneInput = false;\n            }\n        });\n    },\n    watch: {\n        time(newVal, oldVal) {\n            if (oldVal != null && newVal != null && oldVal != newVal && oldVal != \"\" && newVal != \"\" && (isValid(newVal))) {\n                this.round(newVal);\n            }\n            // this.setTimePicker(newVal);\n        },\n    },\n    computed: {\n        zoneName() {\n            return this.isPQREndReservation ? this.onDemandZoneDetails?.name\n                ? this.onDemandZoneDetails?.name\n                : \"\" : this.zoneDetails?.zoneName\n                ? this.zoneDetails?.zoneName\n                : \"\"\n        },\n        formattedDateTime() {\n            return this.time !== null && this.time !== undefined && this.time !== \"\" ? format(this.time, 'iii, LLL dd') : \"\"\n        },\n        formattedYear() {\n            return this.time !== null && this.time !== undefined && this.time !== \"\" ? format(this.time, 'yyyy') : \"\"\n        },\n        formattedTime() {\n            return this.time !== null && this.time !== undefined && this.time !== \"\" ? format(this.time, 'hh:mm aa') : \"\"\n        },\n        ...mapGetters({\n            casinoDetails: \"getterCasinoDetails\",\n            zoneDetails: \"getterZoneDetails\",\n            onDemandZoneDetails: \"getterOnDemandZoneDetails\",\n            templateFlags: \"getterTemplateFlags\",\n            isPQREndReservation: \"getterZoneIsPQREndReservation\",\n        }),\n        singleQuotes() {\n            return this.time !== null && this.time !== undefined && this.time !== \"\" && Object.hasOwnProperty.call(this.zoneDetails, 'timePickerConfiguration') && this.zoneDetails.timePickerConfiguration == \"0\" ? (format(this.time, 'yyyy-MM-dd') == this.currentDate || (this.beforeEstimate !== null && this.beforeEstimate !== undefined && this.beforeEstimate !== \"\" && this.estimate !== null && this.estimate !== undefined && this.estimate !== \"\" && this.beforeEstimate.grandTotal == this.estimate.grandTotal)) : true\n        },\n        doubleQuotes() {\n            return this.time !== null && this.time !== undefined && this.time !== \"\" && Object.hasOwnProperty.call(this.zoneDetails, 'timePickerConfiguration') && this.zoneDetails.timePickerConfiguration == \"0\" ? (format(this.time, 'yyyy-MM-dd') != this.currentDate && (this.beforeEstimate !== null && this.beforeEstimate !== undefined && this.beforeEstimate !== \"\" && this.estimate !== null && this.estimate !== undefined && this.estimate !== \"\" && this.beforeEstimate.grandTotal != this.estimate.grandTotal)) : false\n        },\n        formattedEntryDisplayTime() {\n            return this.casinoDetails.userDetail.entrytime !== null && this.casinoDetails.userDetail.entrytime !== undefined && this.casinoDetails.userDetail.entrytime !== \"\" ? format((new Date(this.casinoDetails.userDetail.entrytime)), 'hh:mm a') : format(dateToTimeZoneDate(new Date(), this.zoneDetails.timezone), 'hh:mm a');\n        },\n        infoFlag() {\n            return this.contactObj == null ||\n                !this.contactObj.isValid ||\n                this.contactObj.phoneNumber == \"\" ||\n                this.contactObj.phoneNumber == null ||\n                this.licencePlate === \"\" ||\n                this.licencePlate === null\n                ? false\n                : true;\n        },\n        timeFlag() {\n            return this.time == null ||\n                this.disableAddPaymentBtn ||\n                this.estimate === null ||\n                this.estimate === \"\" || (Object.hasOwnProperty.call(this.zoneDetails, 'timePickerConfiguration') && this.zoneDetails.timePickerConfiguration == \"1\" && format(this.time, 'yyyy-MM-dd') != format(this.minTimeDate, 'yyyy-MM-dd') && (this.beforeEstimate === null || this.beforeEstimate == \"\" || this.beforeEstimate == undefined)) ||\n                this.time === \"\" || this.time == undefined\n                ? false\n                : true;\n        },\n        paymentFlag() {\n            return this.estimate === null ||\n                this.estimate === \"\" ||\n                this.estimate.hasOwnProperty.call(\"grandTotal\") ||\n                this.estimate.hasOwnProperty.call(\"totalPrice\") ||\n                this.estimate.hasOwnProperty.call(\"totalFee\") ||\n                this.estimate.hasOwnProperty.call(\"totalTax\") || (this.zoneDetails?.timePickerConfiguration == '1' && this.beforeEstimate === null && this.beforeEstimate === \"\" && this.beforeEstimate === null && this.beforeEstimate.hasOwnProperty.call(\"totalPrice\") && this.beforeEstimate.hasOwnProperty.call(\"totalFee\") && this.beforeEstimate.hasOwnProperty.call(\"totalTax\"))\n                ? false\n                : true;\n        },\n        computedDateFormatted() {\n            return this.time != null && this.time != \"\" && this.time != undefined ? format(this.time, 'MM/dd/yyyy') : \"\"\n        },\n        disableSubmitBtn() {\n            let disabled =\n                this.contactObj == null ||\n                !this.contactObj.isValid ||\n                this.contactObj.phoneNumber == \"\" ||\n                this.contactObj.phoneNumber == null ||\n                this.licencePlate === \"\" ||\n                this.licencePlate === null ||\n                this.disableAddPaymentBtn ||\n                this.estimate === null ||\n                this.estimate === \"\"\n            this.exitDate === \"\";\n            let selectedMins = this.time !== null && this.time !== undefined && this.time !== \"\" ? format(this.time, 'mm') : new Date();\n            let selectedHours = this.time !== null && this.time !== undefined && this.time !== \"\" ? format(this.time, 'hh') : new Date();\n            let selectedAMPM = this.time !== null && this.time !== undefined && this.time !== \"\" ? format(this.time, 'aaa') : new Date();\n            disabled =\n                disabled ||\n                selectedMins == null ||\n                selectedMins === \"\" ||\n                selectedMins == undefined ||\n                selectedHours == null ||\n                selectedHours === \"\" ||\n                selectedHours == undefined || selectedAMPM == null ||\n                selectedAMPM === \"\" ||\n                selectedAMPM == undefined || this.time === null || this.time === \"\" || this.time === undefined\n            disabled =\n                this.licencePlate != \"\" && this.licencePlate != null\n                    ? disabled || /^[a-z0-9]+$/i.test(this.licencePlate) === false\n                    : disabled;\n            return disabled;\n        },\n        disableAddLicencePlateBtn() {\n            if (this.zoneDetails.lpr_status == \"0\") {\n                return this.isContactValid == false ? true : false;\n            } else {\n                return this.isContactValid == false ||\n                    this.licencePlate == \"\" ||\n                    this.licencePlate == null ||\n                    /^[a-z0-9]+$/i.test(this.licencePlate) === false\n                    ? true\n                    : false;\n            }\n        },\n    },\n    mounted() {\n        EventBus.$on('SET_TIME', () => {\n            this.onTimePickerChange();\n        })\n        // this.setDefaultDate();\n    },\n    methods: {\n        round(time) {\n            let exitdate = time !== null && time !== '' ? format(time, 'yyyy/MM/dd') : new Date();\n\n            let selectedMins = time !== null && time !== '' ? format(time, 'mm') : new Date();\n            let selectedHours = time !== null && time !== '' ? format(time, 'hh') : new Date();\n            let selectedAMPM = time !== null && time !== '' ? format(time, 'aaa') : new Date();\n            if (exitdate != null && selectedMins != '15' && selectedMins != '30' && selectedMins != '45' && selectedMins != '00' && selectedMins != null && selectedMins != \"\" && selectedHours != null && selectedHours != \"\" && selectedAMPM != null && selectedAMPM != \"\") {\n                let intervalMilliseconds = 900000\n                let datetime = new Date(exitdate + \" \" + selectedHours + \":\" + selectedMins + \" \" + selectedAMPM)\n                let interval = datetime.getTime() % intervalMilliseconds;\n                let delta = interval === 0 ? 0 : datetime.getTime() - interval;\n                delta += intervalMilliseconds;\n                // this.exitTimeSelected = Object.assign(this.exitTimeSelected, { hh: format(new Date(delta), 'hh'), mm: format(new Date(delta), 'mm'), a: format(new Date(delta), 'a'), })\n                return interval !== 0 ? new Date(delta) : datetime;\n            }\n        },\n        dateChange() {\n            this.dateTimeChange();\n            Object.hasOwnProperty.call(this.zoneDetails, 'timePickerConfiguration') && this.zoneDetails?.timePickerConfiguration == \"1\" ? this.beforeDateTimeChange() : \"\";\n        },\n        formatExitDateTime(time, val) {\n            if (time !== null && time !== undefined && time != '') {\n                let utcDate = new Date(time * 1000).toUTCString(); //\"Wed, 27 Jan 2021 13:59:04 GMT\"\n                let month = utcDate.split(\",\")[1].split(\" \")[2]; // Jan\n                let date = utcDate.split(\",\")[1].split(\" \")[1]; // 27\n                let year = utcDate.split(\",\")[1].split(\" \")[3];\n                let hr = utcDate.split(\",\")[1].split(\" \")[4].split(\":\")[0]; // 13\n                let min = utcDate.split(\",\")[1].split(\" \")[4].split(\":\")[1]; //59\n                let formatHr = Number(hr) > 12 ? Number(hr) - 12 : Number(hr); // 1\n                formatHr = Number(formatHr) >= 10 ? Number(formatHr) : formatHr; //01\n                let amOrpm = Number(hr) >= 12 ? \"p\" : \"a\"; //PM\n                let ampm = Number(hr) >= 12 ? \"PM\" : \"AM\";\n                switch (val) {\n                    case 'hour': {\n                        return formatHr + amOrpm;\n                    }\n                    case 'mins': {\n                        return min\n                    }\n                    case 'date': {\n                        return month + \" \" + date + \", \" + year + \" \" + formatHr + \":\" + min + \" \" + ampm;\n                    }\n                }\n            }\n            //Jan 27, 01:59 PM\n        },\n        reloadBooking() {\n            let url = window.location.origin + \"/g/\" + this.casinoDetails.userDetail.bid;\n            window.location.replace(url);\n        },\n        setDefaultDate() {\n            this.dateFormatted = this.zoneDetails.timezone ? format(\n                dateToTimeZoneDate(addMinutes(new Date(), 15),\n                    this.zoneDetails.timezone\n                ),\n                \"MM/dd/yyyy\"\n            )\n                : format(addMinutes(new Date(), 15), \"MM/dd/yyyy\");\n            this.time = this.zoneDetails.timezone\n                ?\n                dateToTimeZoneDate(\n                    addMinutes(new Date(), 15),\n                    this.zoneDetails.timezone\n                )\n                : addMinutes(new Date(), 15);\n            let fifteenTime = this.time;\n            this.time = format(this.time, 'mm') === '15' || format(this.time, 'mm') === '30' || format(this.time, 'mm') === '45' || format(this.time, 'mm') === '00' ? fifteenTime : this.round(this.time);\n            let selectedMins = this.time !== null && this.time !== undefined && this.time !== \"\" ? format(this.time, 'mm') : \"\";\n            let selectedHours = this.time !== null && this.time !== undefined && this.time !== \"\" ? format(this.time, 'HH') : \"\";\n            let selectedAMPM = this.time !== null && this.time !== undefined && this.time !== \"\" ? format(this.time, 'a') : \"\";\n            this.stopTime = selectedMins != null && selectedMins != \"\" && selectedHours != null && selectedHours != \"\" && selectedAMPM != null && selectedAMPM != \"\" ? selectedHours + \":\" + selectedMins + \":\" + \"00\" : \"\";\n            // this.dateTimeChange()\n            // Object.hasOwnProperty.call(this.zoneDetails, 'timePickerConfiguration') && this.zoneDetails?.timePickerConfiguration == \"1\" && format(this.time, 'yyyy-MM-dd') != format(dateToTimeZoneDate(new Date(), this.zoneDetails.timezone), 'yyyy-MM-dd') ? this.beforeDateTimeChange() : \"\";\n        },\n        onTimePickerChange() {\n            let exitdate = this.time !== null && this.time !== undefined && this.time !== \"\" ? format(this.time, 'yyyy/MM/dd') : \"\";\n            let selectedMins = this.time !== null && this.time !== undefined && this.time !== \"\" ? format(this.time, 'mm') : \"\";\n            let selectedHours = this.time !== null && this.time !== undefined && this.time !== \"\" ? format(this.time, 'HH') : \"\";\n            let selectedAMPM = this.time !== null && this.time !== undefined && this.time !== \"\" ? format(this.time, 'a') : \"\";\n            this.stopTime = selectedMins != null && selectedMins != \"\" && selectedHours != null && selectedHours != \"\" && selectedAMPM != null && selectedAMPM != \"\" ? selectedHours + \":\" + selectedMins + \":\" + \"00\" : \"\";\n            let currenTime = this.zoneDetails.timezone\n                ? format(\n                    dateToTimeZoneDate(new Date(),\n                        this.zoneDetails.timezone\n                    ),\n                    \"yyyy-MM-dd HH:mm:ss\"\n                )\n                : format(new Date(), \"yyyy-MM-dd  HH:mm:ss\");\n            if (\n                selectedMins != null && selectedMins != \"\" && selectedHours != null && selectedHours != \"\" && selectedAMPM != null && selectedAMPM != \"\" &&\n                new Date(exitdate + \" \" + this.stopTime).getTime() >\n                new Date(currenTime).getTime()\n            ) {\n                format(this.time, 'yyyy-MM-dd') != format(this.minTimeDate, 'yyyy-MM-dd') ? this.beforeDateTimeChange() : \"\";\n                this.dateTimeChange();\n\n            }\n        },\n        setDatePicker() {\n            //set the minimum date to today date(zone time zone date)\n            this.minTimeDate = this.zoneDetails.timezone ? this.round(this.zoneDetails.timezone\n                ?\n                dateToTimeZoneDate(addMinutes(new Date(), 15),\n                    this.zoneDetails.timezone\n                )\n                : addMinutes(new Date(), 15)) : this.zoneDetails.timezone\n                ?\n                dateToTimeZoneDate(addMinutes(new Date(), 15),\n                    this.zoneDetails.timezone\n                )\n                : addMinutes(new Date(), 15)\n            //calculate max parkign time in seconds\n            let maxPark = this.zoneDetails != null && this.zoneDetails !== undefined && this.zoneDetails != \"\" ? this.zoneDetails?.maxParkingTime : null;\n\n            let addeddays = addDays(new Date(), maxPark?.days);\n            let addedhours = addHours(addeddays, maxPark?.hours);\n            let addedmins = addMinutes(addedhours, maxPark?.minutes);\n\n            //get max date in seconds based on max parking time\n            let maxZoneDate = addedmins\n            this.maxTimeDate = this.zoneDetails.timezone\n                ?\n                dateToTimeZoneDate(\n                    new Date(maxZoneDate),\n                    this.zoneDetails.timezone\n                )\n                : new Date(maxZoneDate);\n            //get max date with time and set it to maxDateTime\n            this.maxDateTime = this.zoneDetails.timezone\n                ? format(\n                    dateToTimeZoneDate(\n                        new Date(maxZoneDate),\n                        this.zoneDetails.timezone\n                    ),\n                    \"yyyy-MM-dd hh:mm aaaaa\"\n                )\n                : format(new Date(), \"yyyy-MM-dd hh:mm aaaaa\");\n        },\n\n        /** @methods to find the estimate rate \n         @params startDate , stopDate,zcode, type , env_overRide\n         */\n\n        async dateTimeChange() {\n            if (!this.zoneDetails.zcode) {\n                return\n            }\n            try {\n                // format(new Date(this.checkinDate), \"yyyy-MM-dd'T'HH:mm:ss\");\n                let href = window.location.href;\n                let edtEntryTime = \"\"\n                if (href.includes('entrytime')) {\n                    let params = href.split('?');\n                    let timeparam = params[2].split('entrytime')[1];\n                    edtEntryTime = timeparam.substring(1, timeparam.length)\n                }\n\n                this.startDate = edtEntryTime !== null && edtEntryTime !== undefined && edtEntryTime !== \"\" ? format(new Date(this.formatExitDateTime(edtEntryTime, 'date')), \"yyyy-MM-dd'T'HH:mm:ss\") : this.zoneDetails.timezone\n                    ? format(\n                        dateToTimeZoneDate(\n                            new Date(),\n                            this.zoneDetails.timezone\n                        ),\n                        \"yyyy-MM-dd'T'HH:mm:ss\"\n                    )\n                    : format(new Date(), \"yyyy-MM-dd'T'HH:mm:ss\");\n                // console.log(this.exitTimeSelected?.hh+\":\"+this.exitTimeSelected.mm+\":00\")\n                // this.exitDate + \"T23:59:00\"\n                let stopTime = this.stopTime;\n                let exitdate = this.time !== null && this.time !== undefined && this.time !== \"\" ? format(this.time, 'yyyy-MM-dd') : \"\";\n                let exittime = Object.hasOwnProperty.call(this.zoneDetails, 'timePickerConfiguration') && this.zoneDetails?.timePickerConfiguration == '1' ? 'T' + stopTime : \"T23:59:00\";\n                let stopDate = exitdate + exittime;\n                let data = {\n                    startAt: this.startDate,\n                    stopAt: stopDate,\n                    zcode: this.zoneDetails.zcode,\n                };\n                this.addPaymentBtnLoading = true;\n                var getRate = await API.getRate(data);\n                //condition to check if the date time selected is lesser than current time\n                if (!getRate?.data?.status && !this.getRateCall) {\n                    this.disableAddPaymentBtn = true;\n                    this.alertDialog = true;\n                    this.alertMsg =\n                        getRate?.data?.message || \"Error in getting rate details\";\n                    this.openDatePicker = false;\n                    this.openTimePicker = false;\n                    EventBus.$emit('datetime-set');\n\n                } else {\n                    this.disableAddPaymentBtn = false;\n                    this.openDatePicker = false;\n                    this.openTimePicker = false;\n                    EventBus.$emit('datetime-set');\n\n                }\n                this.estimate = Object.assign({}, getRate?.data?.data);\n                // estimatedVal != \"\" &&\n                // estimatedVal != null &&\n                // estimatedVal != undefined\n                //   ? Number(estimatedVal).toFixed(2)\n                //   : estimatedVal;\n                this.openDatePicker = false;\n                this.openTimePicker = false;\n                this.addPaymentBtnLoading = false;\n            }\n            catch (error) {\n                this.addPaymentBtnLoading = false;\n                console.log(error);\n            }\n        },\n        async beforeDateTimeChange() {\n            if (!this.zoneDetails.zcode) {\n                return\n            }\n            try {\n                // format(new Date(this.checkinDate), \"yyyy-MM-dd'T'HH:mm:ss\");\n\n                let href = window.location.href;\n                let edtEntryTime = \"\"\n                if (href.includes('entrytime')) {\n                    let params = href.split('?');\n                    let timeparam = params[2].split('entrytime')[1];\n                    edtEntryTime = timeparam.substring(1, timeparam.length)\n                }\n                this.startDate = edtEntryTime !== null && edtEntryTime !== undefined && edtEntryTime !== \"\" ? format(new Date(this.formatExitDateTime(edtEntryTime, 'date')), \"yyyy-MM-dd'T'HH:mm:ss\") : this.zoneDetails.timezone\n                    ? format(\n                        dateToTimeZoneDate(\n                            new Date(),\n                            this.zoneDetails.timezone\n                        ),\n                        \"yyyy-MM-dd'T'HH:mm:ss\"\n                    )\n                    : format(new Date(), \"yyyy-MM-dd'T'HH:mm:ss\");\n                let stopTime = this.stopTime;\n                let selectedHours = this.casinoDetails.userDetail.entrytime != null && this.casinoDetails.userDetail.entrytime !== undefined && this.casinoDetails.userDetail.entrytime != \"\" ? format(new Date(this.casinoDetails.userDetail.entrytime), 'HH') : format(dateToTimeZoneDate(new Date(), this.zoneDetails.timezone), 'HH');\n                let selectedMins = this.casinoDetails.userDetail.entrytime != null && this.casinoDetails.userDetail.entrytime !== undefined && this.casinoDetails.userDetail.entrytime != \"\" ? format(new Date(this.casinoDetails.userDetail.entrytime), 'mm') : format(dateToTimeZoneDate(new Date(), this.zoneDetails.timezone), 'mm');\n                let exitdate = this.time !== null && this.time !== undefined && this.time !== \"\" ? format(this.time, 'yyyy-MM-dd') : \"\";\n                let exittime = Object.hasOwnProperty.call(this.zoneDetails, 'istimePickerConfigurationGated') && this.zoneDetails?.timePickerConfiguration == '0' ? 'T' + stopTime : 'T' + selectedHours + \":\" + selectedMins + \":00\";\n\n                let stopDate = exitdate + exittime;\n                let data = {\n                    startAt: this.startDate,\n                    stopAt: stopDate,\n                    zcode: this.zoneDetails.zcode,\n                };\n                this.addPaymentBtnLoading = true;\n                var getRate = await API.getRate(data);\n                //condition to check if the date time selected is lesser than current time\n                if (!getRate?.data?.status && !this.getRateCall) {\n                    this.disableAddPaymentBtn = true;\n                    this.alertDialog = true;\n                    this.alertMsg =\n                        getRate?.data?.message || \"Error in getting rate details\";\n                    this.openDatePicker = false;\n                    this.openTimePicker = false;\n                    EventBus.$emit('datetime-set');\n                } else {\n                    this.disableAddPaymentBtn = false;\n                    this.openDatePicker = false;\n                    this.openTimePicker = false;\n                    EventBus.$emit('datetime-set');\n                }\n                this.beforeEstimate = Object.assign({}, getRate?.data?.data);\n                // estimatedVal != \"\" &&\n                // estimatedVal != null &&\n                // estimatedVal != undefined\n                //   ? Number(estimatedVal).toFixed(2)\n                //   : estimatedVal;\n                this.addPaymentBtnLoading = false;\n            }\n            catch (error) {\n                this.addPaymentBtnLoading = false;\n                console.log(error);\n            }\n        },\n        formatDate(date) {\n            let stringdate = date.toString();\n            if (!date) return null;\n\n            const [year, month, day] = stringdate.split(\"-\");\n            return `${month}/${day}/${year}`;\n        },\n        parseDate(date) {\n            if (!date) return null;\n\n            const [month, day, year] = date.split(\"/\");\n            return `${year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\n        },\n        async addPayment() {\n            let exitDate = this.time != null || this.time !== undefined || this.time != \"\" ? format(this.time, 'yyyy-MM-dd') : format(new Date(), 'yyyy-MM-dd')\n            let exitTime = this.time != null || this.time !== undefined || this.time != \"\" ? Object.hasOwnProperty.call(this.zoneDetails, 'timePickerConfiguration') && this.zoneDetails.timePickerConfiguration == 1 ? format(this.time, 'hh:mm a') : \"11:59 PM\" : \"\";\n            let exitDateTime = exitDate + \" \" + exitTime\n            let entryDateTime = this.zoneDetails.timezone\n                ? format(\n                    dateToTimeZoneDate(new Date(), this.zoneDetails.timezone),\n                    \"yyyy-MM-dd hh:mm a\"\n                )\n                : format(new Date(), \"yyyy-MM-dd'T'HH:mm a\");\n            let commitData = {\n                plate: this.licencePlate,\n                contact: this.contactObj?.formattedNumber,\n                entryTime: entryDateTime,\n                edtParams: this.casinoDetails?.userDetail?.edtParams,\n                exitTime: exitDateTime,\n                estimate: this.estimate,\n            };\n            let details = await API.prepaidOpenTransaction({\n                vehicleNo: this.licencePlate,\n                contact: this.contactObj?.formattedNumber,\n                exitTime: exitDateTime, zcode: this.zoneDetails?.zcode,\n                mid: this.zoneDetails?.mid,\n                eventType: \"PaidHostPass\",\n            });\n\n            if (details?.data?.status) {\n                this.$store.commit(\"SET_CASINO_USERDETAILS\", commitData);\n                this.$router.push({ name: 'addpayment', query: { zcode: this.zoneDetails?.zcode, sessiontype: 'cico', state: 'addpayment' } });\n            } else {\n                if (details?.data?.message == \"Booking Already Exists\") {\n                    let commitData = {\n                        plate: this.licencePlate,\n                        contact: this.contactObj.formattedNumber,\n                        entryTime: entryDateTime,\n                        edtParams: this.casinoDetails?.userDetail?.edtParams,\n                        exitTime: exitDateTime,\n                        estimate: this.estimate,\n                        bid: details?.data?.data?.bid\n                    };\n                    if (details?.data?.data?.cardOnFile == 0 || details?.data?.data?.cardOnFile == 2) {\n                        this.$store.commit(\"SET_CASINO_USERDETAILS\", commitData);\n                        this.$router.push({ name: 'addpayment', query: { zcode: this.zoneDetails?.zcode, sessiontype: 'cico', state: 'addpayment' } });\n                    }\n                    else if (details?.data?.data?.cardOnFile == 1) {\n                        // this.$store.commit(\"SET_CASINO_USERDETAILS\", commitData);\n                        // this.$router.replace({ path: \"/prepaidhost/odReceipt\" });\n                        this.$router.replace({ query: { bid: details?.data?.data?.bid } });\n\n                    }\n                }\n                this.alertMsg = details?.data?.message ? details?.data?.message : \"\";\n\n                this.alertDialog = true;\n            }\n        },\n\n        uppercase() {\n            if (rules.alphaNumeric(this.licencePlate) === \"Must be alphanumeric\") {\n                this.licencePlate = this.licencePlate.replace(/[^\\w\\s]/gi, '')\n            }\n            this.licencePlate = this.licencePlate.trim()\n            this.licencePlate = this.licencePlate.toUpperCase();\n        },\n        /**\n         * @method getZoneDetails fetch the zone details and commit SET_ZONE_DETAILS mutation.\n         */\n        async getZoneDetails(searchParamKey, searchParamValue) {\n            try {\n                var zoneDetails = await API.getZoneDetails(searchParamKey, searchParamValue)\n                this.$store.commit(\"SET_ZONE_DETAILS\", zoneDetails?.data?.zone);\n            } catch (error) {\n                console.log(error);\n            }\n        },\n        /**\n         * @method getOnDemandZoneDetails fetch the ondemand zone details from Pcom and commit SET_ZONE_DETAILS mutation.\n         */\n        async getOnDemandZoneDetails(searchParamValue) {\n            this.loading = true;\n            try {\n                var zoneDetails = await API.getOnDemandZoneDetails(searchParamValue);\n                this.setDefaultDate();\n                this.loading = false;\n                if (zoneDetails.data?.lot) {\n                    this.$store.commit(\n                        \"SET_ON_DEMAND_ZONE_DETAILS\",\n                        zoneDetails.data?.lot\n                    );\n                    this.setDatePicker();\n                } else {\n                    this.alertMsg =\n                        zoneDetails?.data?.message || \"Error in loading location details.\";\n                    this.alertDialog = true;\n                }\n            } catch (error) {\n                this.loading = false;\n                console.log(error);\n            }\n        },\n        onContactInput(contactDetails) {\n            this.isContactValid = contactDetails?.isValid;\n            this.contactObj = Object.assign({}, contactDetails);\n        },\n        setReenterPlateFlag() {\n            this.licencePlate = this.selectedPlate || \"\";\n            this.reEnterPlate = true;\n            this.confirmCreateSessionDialog = false;\n        },\n        /**\n         * @method createSession Fetch booking id on add booking and fetch the booking info.\n         */\n        async createSession() {\n            this.addLicencePlateBtnLoading = true;\n            let postObj = {\n                contact: this.contactObj?.formattedNumber,\n                uniqueID: this.contactObj?.nationalNumber,\n                vehicleNo: this.licencePlate.toUpperCase(),\n                locationCode: this.zoneDetails.zcode,\n                zid: this.zoneDetails.zid,\n                entrytime: format(\n                    new Date(\n                        new Date().toLocaleString(\"en-US\", {\n                            timeZone: this.zoneDetails.timezone,\n                        })\n                    ),\n                    \"yyyy-MM-dd HH:mm:ss\"\n                ),\n                source: \"appclip\",\n                webView: \"1\",\n                type: \"2\",\n                state: 2,\n                payment_status: 0,\n                txnID_addCC: 0,\n            };\n            if (this.reEnterPlate) {\n                Object.assign(postObj, { createNewSession: 1 });\n            }\n            try {\n                var session = await API.createSession(postObj);\n                let bid = session?.data?.refno;\n                if (session.data.status === false) {\n                    this.errMsg = session?.data?.message ? session.data.message : \"\";\n                    if (\n                        session?.data?.showCreateNewSessionPopup &&\n                        session.data.showCreateNewSessionPopup == 1\n                    ) {\n                        this.postToLoggerAPI({\n                            phone: this.contactObj?.nationalNumber,\n                            plate: this.licencePlate.toUpperCase(),\n                            statusText: \"Parker session not found in the system.\",\n                        });\n                        this.confirmCreateSessionDialog = true;\n                        this.addLicencePlateBtnLoading = false;\n                        return;\n                    }\n                    this.errDialog = true;\n                    this.addLicencePlateBtnLoading = false;\n                    return;\n                }\n                await this.getBookingDetails(bid);\n                this.addLicencePlateBtnLoading = false;\n                this.reEnterPlate\n                    ? this.postToLoggerAPI({\n                        phone: this.contactObj?.nationalNumber,\n                        refId: bid,\n                        icon: \"login\",\n                        plate: this.licencePlate.toUpperCase(),\n                        statusText:\n                            \"Parker plate/contact number not found in the system. Parker created a new session using generic payment QR\",\n                    })\n                    : this.postToLoggerAPI({\n                        phone: this.contactObj?.nationalNumber,\n                        refId: bid,\n                        icon: \"login\",\n                        plate: this.licencePlate.toUpperCase(),\n                        statusText:\n                            \"Parker session found. Parker opened his/her session using generic payment QR\",\n                    });\n\n                this.$router.replace({ query: { bid: bid } });\n                window.location.reload();\n            } catch (error) {\n                this.addLicencePlateBtnLoading = false;\n                console.log(error);\n            }\n        },\n        /**\n         * @method getBookingDetails fetch the booking details and commit SET_BOOKING_DETAILS mutation.\n         */\n        async getBookingDetails(bookingId) {\n            try {\n                var bookingDetails = await API.getBookingState(bookingId)\n                this.$store.commit(\n                    \"SET_BOOKING_DETAILS\",\n                    bookingDetails.data?.data ? bookingDetails.data.data : null\n                );\n            } catch (error) {\n                console.log(error);\n            }\n        },\n        closeConfirmCreateSessionDialog() {\n            this.confirmCreateSessionDialog = false;\n            this.addLicencePlateBtnLoading = false;\n        },\n    },\n};\n</script>\n<style scoped>\n.date-text {\n    font-size: 15px !important;\n    font-weight: 700 !important;\n}\n</style>"]}]}