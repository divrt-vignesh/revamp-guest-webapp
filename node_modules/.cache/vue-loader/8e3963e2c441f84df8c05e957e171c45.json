{"remainingRequest":"/home/vignesh/DIVRT/guest-webapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vignesh/DIVRT/guest-webapp/src/views/CheckedIn.vue?vue&type=template&id=0106dc62&","dependencies":[{"path":"/home/vignesh/DIVRT/guest-webapp/src/views/CheckedIn.vue","mtime":1686824874961},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vignesh/DIVRT/guest-webapp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cjx2LWNvbnRhaW5lciBjbGFzcz0icGEtNCIgZmx1aWQ+CiAgICA8di1yb3cgY2xhc3M9InRleHQtY2VudGVyIiBuby1ndXR0ZXJzPgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiI+CiAgICAgICAgICAgIDx2LWltZyBhbHQ9IlBBUktJTkcuQ09NIiBjbGFzcz0ibXktMyIgaGVpZ2h0PSI0MiIgY29udGFpbiBzcmM9Ii4uL2Fzc2V0cy9sb2dvX2h1Z2VfZHJrLnBuZyIgLz4KICAgICAgICA8L3YtY29sPgogICAgPC92LXJvdz4KICAgIDx2LXJvdyBuby1ndXR0ZXJzPgogICAgICAgIDx2LWNvbD4KICAgICAgICAgICAgPHYtY2FyZCBjbGFzcz0ibXgtYXV0byByb3VuZGVkLWxnIiBtYXgtd2lkdGg9IjM3NCI+CiAgICAgICAgICAgICAgICA8di1kaWFsb2cgdi1tb2RlbD0ibG9hZGluZyIgcGVyc2lzdGVudD4KICAgICAgICAgICAgICAgICAgICA8di1jYXJkIGNsYXNzPSJwYS00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtcHJvZ3Jlc3MtY2lyY3VsYXIgaW5kZXRlcm1pbmF0ZSBjb2xvcj0icmVkIj48L3YtcHJvZ3Jlc3MtY2lyY3VsYXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtbC00IiBzdHlsZT0iZm9udC1zaXplOiAxNHB4Ij5QbGVhc2Ugd2FpdC4uLjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgICAgICAgIDwvdi1kaWFsb2c+CiAgICAgICAgICAgICAgICA8IS0tIDx2LXJlc3BvbnNpdmUgOmFzcGVjdC1yYXRpbz0iMTYvOSI+IC0tPgoKICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90PSJwcm9ncmVzcyI+CiAgICAgICAgICAgICAgICAgICAgPHYtcHJvZ3Jlc3MtbGluZWFyIGNvbG9yPSJyZWQiIGhlaWdodD0iMTAiIGluZGV0ZXJtaW5hdGU+PC92LXByb2dyZXNzLWxpbmVhcj4KICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJwb3NpdGlvbjogcmVsYXRpdmUiPgogICAgICAgICAgICAgICAgICAgIDwhLS0gPHYtc2tlbGV0b24tbG9hZGVyCiAgICAgICAgICAgICAgdi1zaG93PSIhYm9va2luZ0RldGFpbHMuaGFzT3duUHJvcGVydHkoJ3pvbmUnKSIKICAgICAgICAgICAgICBoZWlnaHQ9IjI2MHB4IgogICAgICAgICAgICAgIGNsYXNzPSJyb3VuZGVkLXQtbGciCiAgICAgICAgICAgICAgdHlwZT0iaW1hZ2UiCiAgICAgICAgICAgID48L3Ytc2tlbGV0b24tbG9hZGVyPi0tPgogICAgICAgICAgICAgICAgICAgIDx2LWltZyBjbGFzcz0icm91bmRlZC10LWxnIiA6bWF4LWhlaWdodD0ibG9nb0hlaWdodCIgc3R5bGU9ImZpbHRlcjogYnJpZ2h0bmVzcyg1MCUpIiA6c3JjPSJib29raW5nRGV0YWlscy5oYXNPd25Qcm9wZXJ0eSgnem9uZScpICYmCiAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLnpvbmUuaW1hZ2UgIT0gJycgJiYKICAgICAgICAgICAgICAgICAgICAgICAgYm9va2luZ0RldGFpbHMuem9uZS5pbWFnZSAhPSBudWxsCiAgICAgICAgICAgICAgICAgICAgICAgID8gYm9va2luZ0RldGFpbHMuem9uZS5pbWFnZQogICAgICAgICAgICAgICAgICAgICAgICA6IHpvbmVJbWdVUkwKICAgICAgICAgICAgICAgICAgICAgICAgIiA6bGF6eS1zcmM9ImJvb2tpbmdEZXRhaWxzLmhhc093blByb3BlcnR5KCd6b25lJykgJiYKICAgIGJvb2tpbmdEZXRhaWxzLnpvbmUuaW1hZ2UgIT0gJycgJiYKICAgIGJvb2tpbmdEZXRhaWxzLnpvbmUuaW1hZ2UgIT0gbnVsbAogICAgPyBib29raW5nRGV0YWlscy56b25lLmltYWdlCiAgICA6IHpvbmVJbWdVUkwKICAgICIgYWx0PSJQYXJraW5nLmNvbSBnYXJhZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OnBsYWNlaG9sZGVyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtcm93IGNsYXNzPSJmaWxsLWhlaWdodCBtYS0wIiBhbGlnbj0iY2VudGVyIiBqdXN0aWZ5PSJjZW50ZXIiIG5vLWd1dHRlcnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtcHJvZ3Jlc3MtY2lyY3VsYXIgaW5kZXRlcm1pbmF0ZSBjb2xvcj0iZ3JleSBsaWdodGVuLTUiPjwvdi1wcm9ncmVzcy1jaXJjdWxhcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgPC92LWltZz4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib29raW5nX2hlYWRlciB3aGl0ZS0tdGV4dCB0ZXh0LWxlZnQgbXItNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAge3sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5oYXNPd25Qcm9wZXJ0eSgiYm9va2luZyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBib29raW5nRGV0YWlscy5ib29raW5nLmhlYWRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib29raW5nX2RpdmlkZXJfZGl2IgogICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChib29raW5nRGV0YWlscywgJ2Jvb2tpbmcnKSAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChib29raW5nRGV0YWlscy5ib29raW5nLCAnVHlwZU9mQm9va2luZycpICYmIChib29raW5nRGV0YWlscy5ib29raW5nLlR5cGVPZkJvb2tpbmcgIT0gJ1NlbGYgcmVzZXJ2YXRpb24nKSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWRpdmlkZXIgY2xhc3M9ImJvb2tpbmdfZGl2aWRlciBteC00Ij48L3YtZGl2aWRlcj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib29raW5nX2NvbnRlbnQgd2hpdGUtLXRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9Ik9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGJvb2tpbmdEZXRhaWxzLCAnYm9va2luZycpICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcsICdUeXBlT2ZCb29raW5nJykgJiYgYm9va2luZ0RldGFpbHMuYm9va2luZy5UeXBlT2ZCb29raW5nICE9ICdTZWxmIHJlc2VydmF0aW9uJyI+CiAgICAgICAgICAgICAgICAgICAgICAgIENoZWNrZWQgaW4gYXQKICAgICAgICAgICAgICAgICAgICAgICAge3sKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmhhc093blByb3BlcnR5KCJib29raW5nIikgPyBib29raW5nX2NvbnRlbnQgOiAiIgogICAgICAgICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPSJib29raW5nRGV0YWlscy5oYXNPd25Qcm9wZXJ0eSgnYm9va2luZycpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5oYXNPd25Qcm9wZXJ0eSgnem9uZScpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5ib29raW5nLnZlaGljbGVObyAhPSBudWxsICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5ib29raW5nLnZlaGljbGVObyAhPSAnJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggbGljZW5zZSBwbGF0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAge3sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5oYXNPd25Qcm9wZXJ0eSgiYm9va2luZyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBib29raW5nRGV0YWlscy5ib29raW5nLnZlaGljbGVObwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPHYtZmFiLXRyYW5zaXRpb24+CiAgICAgICAgICAgICAgICAgICAgPHYtYnRuIHYtc2hvdz0iT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoYm9va2luZ0RldGFpbHMsICd6b25lJykgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLnpvbmUuaXNQZWRlc3RyaWFuID09IDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgY2xhc3M9ImZhYkljb24iIGNvbG9yPSIjZjI1NTVjICFpbXBvcnRhbnQiIGZhYiBkYXJrIHJhaXNlZCBsYXJnZSByaWdodAogICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImdldHBlZGVzdHJpYW5BY2Nlc3MoKSIgc3R5bGU9ImJvdHRvbTogMzVweDsgZmxvYXQ6IHJpZ2h0OyByaWdodDogMTBweCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWltZyBzcmM9Ii4uL2Fzc2V0cy9wZWRlc3RyYWluX2Rvb3IucG5nIiBzdHlsZT0ib3BhY2l0eTogMSIgd2lkdGg9IjMyIiBoZWlnaHQ9IjMyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbj48L3YtaW1nPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDx2LWljb24gY2xhc3M9Im1hdGVyaWFsLWljb25zLW91dGxpbmVkIj5kaXJlY3Rpb25zX3dhbGs8L3YtaWNvbj4gLS0+CiAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgIDwvdi1mYWItdHJhbnNpdGlvbj4KCiAgICAgICAgICAgICAgICA8di1jYXJkLXRpdGxlIGNsYXNzPSJwYS0xIj48L3YtY2FyZC10aXRsZT4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0icGEtMSI+CiAgICAgICAgICAgICAgICAgICAgPHYtcm93IGFsaWduPSJjZW50ZXIiIGNsYXNzPSJteC0wIHBiLTAiIG5vLWd1dHRlcnMgdi1pZj0iYm9va2luZ0RldGFpbHMuaGFzT3duUHJvcGVydHkoJ2Jvb2tpbmcnKSAmJgogICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5ib29raW5nLmhhc093blByb3BlcnR5KCdUeXBlT2ZCb29raW5nJykgJiYKICAgICAgICAgICAgICAgICAgICAgICAgYm9va2luZ0RldGFpbHMuYm9va2luZy5UeXBlT2ZCb29raW5nICE9ICdTZWxmIHJlc2VydmF0aW9uJyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24gc3R5bGU9ImZvbnQtc2l6ZTogNTBweCI+bWRpLWNsb2NrLW91dGxpbmU8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEwIiBjbGFzcz0icGwtMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1yb3cgbm8tZ3V0dGVycyBjbGFzcz0iY291bnRlci1jb250ZW50LXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIGNsYXNzPSJwYS0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtc2tlbGV0b24tbG9hZGVyIHYtc2hvdz0iIWJvb2tpbmdEZXRhaWxzLmhhc093blByb3BlcnR5KCdib29raW5nJykgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVBZ28gPT0gJycgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVBZ28gPT0gbnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBoZWlnaHQ9IjQwcHgiIG1heC13aWR0aD0iMjAwIiB0eXBlPSJoZWFkaW5nIj48L3Ytc2tlbGV0b24tbG9hZGVyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ3JleS0tdGV4dCB0ZXh0LS1kYXJrZW4tMSB0aW1lX2FnbyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtc2hvdz0iISh2YWxpZGF0ZWREYXRlVGltZSA+IDApIj57ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVBZ28KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZ3JleS0tdGV4dCB0ZXh0LS1kYXJrZW4tMSB0aW1lX2FnbyIKICAgICAgICAgICAgICAgICAgICAgIHYtc2hvdz0iZ3JhY2VQZXJpb2RUaW1lID4gMCIKICAgICAgICAgICAgICAgICAgICAgID57eyBjb3VudERvd25HcmFjZVBlcmlvZFRpbWUgfX08L3NwYW4KICAgICAgICAgICAgICAgICAgICA+LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJncmV5LS10ZXh0IHRleHQtLWRhcmtlbi0xIHRpbWVfYWdvIiB2LXNob3c9ImJvb2tpbmdEZXRhaWxzLmhhc093blByb3BlcnR5KCdib29raW5nJykgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5ib29raW5nLmhhc093blByb3BlcnR5KCd2YWxpZGF0ZWQnKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcudmFsaWRhdGVkID09ICcxJyAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlZERhdGVUaW1lID4gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI+e3sgY291bnREb3duVmFsaWRhdGVkVGltZSB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgdi1pZj0iYm9va2luZ0RldGFpbHMuaGFzT3duUHJvcGVydHkoJ2Jvb2tpbmcnKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZWREYXRlVGltZSA8PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJncmV5LS10ZXh0IHRleHQtLWRhcmtlbi0xIHRpbWVfYWdvX2NvbnRleHQiPlNpbmNlIHlvdSBwYXJrZWQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDx2LWNvbCBjb2xzPSIxMiIgdi1lbHNlLWlmPSJib29raW5nRGV0YWlscy5oYXNPd25Qcm9wZXJ0eSgnYm9va2luZycpICYmIGdyYWNlUGVyaW9kVGltZSA+IDAiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJncmV5LS10ZXh0IHRleHQtLWRhcmtlbi0xIHRpbWVfYWdvX2NvbnRleHQiCiAgICAgICAgICAgICAgICAgICAgICA+R3JhY2UgcGVyaW9kIHJlbWFpbmluZzwvc3BhbgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC92LWNvbD4tLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIHYtZWxzZS1pZj0iYm9va2luZ0RldGFpbHMuaGFzT3duUHJvcGVydHkoJ2Jvb2tpbmcnKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5ib29raW5nLmhhc093blByb3BlcnR5KCd2YWxpZGF0ZWQnKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5ib29raW5nLnZhbGlkYXRlZCA9PSAnMScgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVkRGF0ZVRpbWUgPiAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJncmV5LS10ZXh0IHRleHQtLWRhcmtlbi0xIHRpbWVfYWdvX2NvbnRleHQiPlZhbGlkYXRpb24gdGltZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiB2LXNob3c9ImJvb2tpbmdEZXRhaWxzLmhhc093blByb3BlcnR5KCdib29raW5nJykgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9va2luZ0RldGFpbHMuYm9va2luZy5oYXNPd25Qcm9wZXJ0eSgndmFsaWRhdGVkJykgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9va2luZ0RldGFpbHMuYm9va2luZy52YWxpZGF0ZWQgPT0gJzEnICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcuaGFzT3duUHJvcGVydHkoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndmFsaWRhdGlvblR5cGUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9va2luZ0RldGFpbHMuYm9va2luZy52YWxpZGF0aW9uVHlwZSA9PSAnRElWUlQnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJncmV5LS10ZXh0IHRleHQtLWRhcmtlbi0xIHZhbGlkYXRlZF90aW1lIj5WYWxpZGF0ZWQgdW50aWwge3sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlZF9jb250ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scyBjbGFzcz0iYWxpZ24tc2VsZi1jZW50ZXIgdGV4dC1jZW50ZXIiIHYtc2hvdz0iYm9va2luZ0RldGFpbHMuaGFzT3duUHJvcGVydHkoJ2Jvb2tpbmcnKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcuaGFzT3duUHJvcGVydHkoJ1R5cGVPZkJvb2tpbmcnKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcuVHlwZU9mQm9va2luZyA9PSAnTW9udGhseScKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuIGNsYXNzPSJlbGV2YXRpb24tMCB3aGl0ZS0tdGV4dCIgdGlsZSB4LXNtYWxsIGNvbG9yPSJncmVlbiBkYXJrZW4tMiI+TW9udGhseTwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzIGNsYXNzPSJhbGlnbi1zZWxmLWNlbnRlciB0ZXh0LWNlbnRlciIgdi1zaG93PSJib29raW5nRGV0YWlscy5oYXNPd25Qcm9wZXJ0eSgnYm9va2luZycpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5ib29raW5nLmhhc093blByb3BlcnR5KCdUeXBlT2ZCb29raW5nJykgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcuVHlwZU9mQm9va2luZyA9PSAnRW1wbG95ZWUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuIGNsYXNzPSJlbGV2YXRpb24tMCB3aGl0ZS0tdGV4dCIgdGlsZSB4LXNtYWxsIGNvbG9yPSJncmVlbiBkYXJrZW4tMiI+RW1wbG95ZWU8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgPHYtcm93IGNsYXNzPSJteC0wIHBiLTAgYmxhY2stLXRleHQgcGwtMiIgbm8tZ3V0dGVycyB2LWlmPSJib29raW5nRGV0YWlscy5oYXNPd25Qcm9wZXJ0eSgnYm9va2luZycpICYmCiAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcuaGFzT3duUHJvcGVydHkoJ1R5cGVPZkJvb2tpbmcnKSAmJgogICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5ib29raW5nLlR5cGVPZkJvb2tpbmcgPT0gJ1NlbGYgcmVzZXJ2YXRpb24nIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtcm93IG5vLWd1dHRlcnMgY2xhc3M9InBiLTQiPjx2LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDaGVja2VkIGluIGF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5oYXNPd25Qcm9wZXJ0eSgiYm9va2luZyIpID8gY2hlY2tpbl9jb250ZW50IDogIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1pZj0iYm9va2luZ0RldGFpbHMuaGFzT3duUHJvcGVydHkoJ2Jvb2tpbmcnKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5oYXNPd25Qcm9wZXJ0eSgnem9uZScpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcucmV2RW5kICE9IG51bGwgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9va2luZ0RldGFpbHMuYm9va2luZy5yZXZFbmQgIT0gJycKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGNoZWNrb3V0X2NvbnRlbnQgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPjwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgICA8di1jb250YWluZXIgZmx1aWQgcGEtMCBzdHlsZT0ibWFyZ2luLWxlZnQ6IDQuNXJlbTsiIHYtaWY9ImJvb2tpbmdEZXRhaWxzLmhhc093blByb3BlcnR5KCdib29raW5nJykgJiYKICAgICAgICAgICAgICAgICAgICAgICAgYm9va2luZ0RldGFpbHMuYm9va2luZy5oYXNPd25Qcm9wZXJ0eSgnVHlwZU9mQm9va2luZycpICYmCiAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcuVHlwZU9mQm9va2luZyA9PSAnU2VsZiByZXNlcnZhdGlvbiciPgogICAgICAgICAgICAgICAgICAgICAgICA8di1yb3cgbm8tZ3V0dGVycz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgY2xhc3M9InBsLTEgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1yb3cgbm8tZ3V0dGVycyBjbGFzcz0iY291bnRlci1jb250ZW50LXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBjbGFzcz0icGEtMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uIGNsYXNzPSJtYXRlcmlhbC1pY29ucy1vdXRsaW5lZCBwci0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJmb250LXNpemU6IDUwcHgiPmhpc3RvcnlfdG9nZ2xlX29mZjwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtc2tlbGV0b24tbG9hZGVyIHYtc2hvdz0iIWJvb2tpbmdEZXRhaWxzLmhhc093blByb3BlcnR5KCdib29raW5nJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIGhlaWdodD0iNDBweCIgbWF4LXdpZHRoPSIyMDAiIHR5cGU9ImhlYWRpbmciPjwvdi1za2VsZXRvbi1sb2FkZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ3JleS0tdGV4dCB0ZXh0LS1kYXJrZW4tMSB0aW1lX2FnbyIgdi1zaG93PSJleGl0RGF0ZVRpbWUgPiAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIj57eyBjb3VudERvd25FeGl0VGltZSB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJncmV5LS10ZXh0IHRleHQtLWRhcmtlbi0xIHRpbWVfYWdvX2NvbnRleHQgcGwtMTUgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tdG9wOiAtMTVweDsiIHYtaWY9ImV4aXREYXRlVGltZSA+IDAiPlJlbWFpbmluZzwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgICA8L3YtY29udGFpbmVyPgogICAgICAgICAgICAgICAgICAgIDx2LXJvdyBuby1ndXR0ZXJzIGFsaWduPSJjZW50ZXIiIGNsYXNzPSJteS0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBjbGFzcz0icGEtMCBhbGlnbi1zZWxmLWNlbnRlciB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gY2xhc3M9ImVsZXZhdGlvbi0wIHdoaXRlLS10ZXh0IiB0aWxlIHgtc21hbGwgY29sb3I9ImdyZWVuIGRhcmtlbi0yIiB2LXNob3c9ImJvb2tpbmdEZXRhaWxzLmhhc093blByb3BlcnR5KCdib29raW5nJykgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5ib29raW5nLmhhc093blByb3BlcnR5KCd2YWxpZGF0ZWQnKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcudmFsaWRhdGVkID09ICcxJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI+VkFMSURBVEVEPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPHYtaWNvbiBjb2xvcj0icmVkIiBjbGFzcz0ibWwtMiIgdi1zaG93PSIoYm9va2luZ0RldGFpbHMuaGFzT3duUHJvcGVydHkoJ2Jvb2tpbmcnKSAmJiBib29raW5nRGV0YWlscy5ib29raW5nLnZhbGlkYXRlZCA9PSAnMScgJiYgc2hvd1BheW1lbnRDYXJkQWRkZWQgPT0gJzEnKSIgPmFwcHJvdmFsPC92LWljb24+IC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgPHYtcm93IGNsYXNzPSJqdXN0aWZ5LWNlbnRlciBtYi0zIiBuby1ndXR0ZXJzIHYtc2hvdz0iT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoYm9va2luZ0RldGFpbHMsICd6b25lJykgJiYKICAgICAgICAgICAgICAgICAgICAgICAgIShib29raW5nRGV0YWlscy56b25lLmlzR2F0ZWQgPT0gJzAnKQogICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ3JleS0tdGV4dCB0ZXh0LS1kYXJrZW4tMSBmb250LXdlaWdodC1ib2xkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj0ic2hvd1BheW1lbnRDYXJkQWRkZWQgJiYgKGlzQ2hlY2tvdXRFbmFibGVkKDEpIHx8IGlzQ2hlY2tvdXRFbmFibGVkKDIpIHx8IGlzQ2hlY2tvdXRFbmFibGVkKDMpKSI+Q2xpY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuIG9wdGlvbiBiZWxvdyB0byBleGl0PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgPHYtcm93IGNsYXNzPSJqdXN0aWZ5LWNlbnRlciBteS0zIiBuby1ndXR0ZXJzCiAgICAgICAgICAgICAgICAgICAgICAgIHYtc2hvdz0iIShpc0NoZWNrb3V0RW5hYmxlZCgxKSB8fCBpc0NoZWNrb3V0RW5hYmxlZCgyKSB8fCBpc0NoZWNrb3V0RW5hYmxlZCgzKSkiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYmxhY2stLXRleHQgdGV4dC0tZGFya2VuLTEgZm9udC13ZWlnaHQtYm9sZCB0ZXh0LWg1Ij5DaGVja2VkIEluPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPCEtLSA8di1jYXJkLXRleHQgY2xhc3M9InRleHQtY2VudGVyIj5DbGljayBhbiBvcHRpb24gdG8gZXhpdDwvdi1jYXJkLXRleHQ+IC0tPgogICAgICAgICAgICAgICAgPHYtY2FyZC1hY3Rpb25zIGNsYXNzPSJ0ZXh0LWNlbnRlciBqdXN0aWZ5LWNlbnRlciBweC0wIHBiLTQgICIgdi1pZj0iT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoYm9va2luZ0RldGFpbHMsICdib29raW5nJykgJiYKICAgICAgICAgICAgICAgICAgICAhc2hvd1BheW1lbnRDYXJkQWRkZWQKICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgIDx2LWNvbnRhaW5lciBjbGFzcz0icGEtMCIgZmx1aWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LXJvdyBuby1ndXR0ZXJzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBjbGFzcz0icHgtNCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJpb3NEZXZpY2UgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoYm9va2luZ0RldGFpbHMsICd6b25lJykgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoYm9va2luZ0RldGFpbHMuem9uZSwgJ3BheW1lbnRTZXJ2aWNlcycpICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGJvb2tpbmdEZXRhaWxzLnpvbmUucGF5bWVudFNlcnZpY2VzLCAnYXBwbGVfcGF5JykgJiYgYm9va2luZ0RldGFpbHMuem9uZS5wYXltZW50U2VydmljZXMuYXBwbGVfcGF5ID09ICcxJyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFwcGxlLXBheSB3aWR0aD0nNzUlJyBoZWlnaHQ9IjQzcHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppb3MtZGV2aWNlPSJpb3NEZXZpY2UgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoYm9va2luZ0RldGFpbHMsICd6b25lJykgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoYm9va2luZ0RldGFpbHMuem9uZSwgJ3BheW1lbnRTZXJ2aWNlcycpICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGJvb2tpbmdEZXRhaWxzLnpvbmUucGF5bWVudFNlcnZpY2VzLCAnYXBwbGVfcGF5JykgJiYgYm9va2luZ0RldGFpbHMuem9uZS5wYXltZW50U2VydmljZXMuYXBwbGVfcGF5ID09ICcxJyI+PC9hcHBsZS1wYXk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBjbGFzcz0icHgtNCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSIhaW9zRGV2aWNlICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGJvb2tpbmdEZXRhaWxzLCAnem9uZScpICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGJvb2tpbmdEZXRhaWxzLnpvbmUsICdwYXltZW50U2VydmljZXMnKSAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChib29raW5nRGV0YWlscy56b25lLnBheW1lbnRTZXJ2aWNlcywgJ2dvb2dsZV9wYXknKSAmJiBib29raW5nRGV0YWlscy56b25lLnBheW1lbnRTZXJ2aWNlcy5nb29nbGVfcGF5ID09ICcxJyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGdvb2dsZS1wYXkgd2lkdGg9Jzc1JScgaGVpZ2h0PSI0M3B4Ij48L2dvb2dsZS1wYXk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBjbGFzcz0icHgtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuIHN0eWxlPSJmb250LXdlaWdodDo3MDAiIGVsZXZhdGlvbj0iMjAiIHJvdW5kZWQgd2lkdGg9Ijc1JSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImFkZF9jcmVkaXRfY2FyZF9idG4gd2hpdGUtLXRleHQgICIgQGNsaWNrPSJuYXZpZ2F0ZVRvQWRkUGF5bWVudCI+IEFkZCBDcmVkaXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2FyZDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBjbGFzcz0ibXQtNCBweC00IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9ImJvb2tpbmdEZXRhaWxzLnpvbmUuaXNQUVJFbmRSZXNlcnZhdGlvbiA9PSAxICYmIChib29raW5nRGV0YWlscy5ib29raW5nLlR5cGVPZkJvb2tpbmcgPT0gJ0d1ZXN0JyB8fCBib29raW5nRGV0YWlscy5ib29raW5nLlR5cGVPZkJvb2tpbmcgPT0gJ1RyYW5zaWVudCcpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gdGV4dCBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImZvbnQtc2l6ZTogMTVweDtmb250LXdlaWdodDogYm9sZGVyO3RleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJob3RlbEd1ZXN0Ij5JIGFtIGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJuaWdodAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3RlbCBndWVzdDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBjbGFzcz0ibXQtNCBweC00IiB2LXNob3c9ImJvb2tpbmdEZXRhaWxzLmhhc093blByb3BlcnR5KCdib29raW5nJykgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5ib29raW5nLmhhc093blByb3BlcnR5KCd2YWxpZGF0ZWQnKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcudmFsaWRhdGVkICE9ICcxJyAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcuaXNWYWxpZGF0aW9uRW5hYmxlZCA9PSAnMScKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biByb3VuZGVkIGVsZXZhdGlvbj0iMjAiIGRlbnNlIHdpZHRoPSI3NSUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ2YWxpZGF0ZV9idG4gd2hpdGUtLXRleHQgYmx1ZSBkYXJrZW4tMiBuby11cHBlci1jYXNlIHB4LTQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0ib3BlblZhbGlkYXRpb25EaWFsb2coKSI+QXBwbHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWW91ciBWYWxpZGF0aW9uPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIGNsYXNzPSJtdC0xMCBwYS0wIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9Ik9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGJvb2tpbmdEZXRhaWxzLCAnem9uZScpICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGJvb2tpbmdEZXRhaWxzLnpvbmUsICdpc0xveWFsdHlTdXBwb3J0ZWQnKSAmJiBib29raW5nRGV0YWlscy56b25lLmlzTG95YWx0eVN1cHBvcnRlZCA9PSAnMScgJiYgYm9va2luZ0RldGFpbHMuYm9va2luZy52YWxpZGF0ZWQgIT0gJzEnICYmIChib29raW5nRGV0YWlscy5ib29raW5nLlR5cGVPZkJvb2tpbmcgPT0gJ0d1ZXN0JyB8fCBib29raW5nRGV0YWlscy5ib29raW5nLlR5cGVPZkJvb2tpbmcgPT0gJ1RyYW5zaWVudCcpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jYXJkIGZsYXQgY29sb3I9IiNlY2VjZWMiIGNsYXNzPSJtYS0wIiB0aWxlIG1heC13aWR0aD0iMTAwJSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXJvdyBjbGFzcz0idGV4dC1jZW50ZXIgcHQtMCIgbm8tZ3V0dGVycz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIGNsYXNzPSJwYS0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9ImZvbnQtc2l6ZTogMTVweDtjb2xvcjogI0YyNTU1Qztmb250LXdlaWdodDogYm9sZGVyOyI+Q0xBSU0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFlPVVIgUEFSS0lORyBESVNDT1VOVDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biBjb2xvcj0iYmxhY2siIGNsYXNzPSJwYS0wIG1hLTAiIHJvdW5kZWQgd2lkdGg9IjI3MCIgaGVpZ2h0PSI3MCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZXZhdGlvbj0iMjAiIEBjbGljaz0ibG95YWx0eSA9IHRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYXZhdGFyIHRpbGUgd2lkdGg9IjIwMCIgaGVpZ2h0PSIxMDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWltZyBzcmM9Ii4uL2Fzc2V0cy9HTkxveWFsdHkucG5nIiBoZWlnaHQ9IjYwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSI0MDBweCI+PC92LWltZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1hdmF0YXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWRpdmlkZXIgc3R5bGU9ImNvbG9yOmJsYWNrIj48L3YtZGl2aWRlcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgY2xhc3M9Im10LTQgdGV4dC1jZW50ZXIgY29sb3ItYmxhY2sgcHgtNCIgc3R5bGU9ImZvbnQtc2l6ZTogMTJweDsiIHYtc2hvdz0iT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoYm9va2luZ0RldGFpbHMsICd6b25lJykgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhKGJvb2tpbmdEZXRhaWxzLnpvbmUuaXNHYXRlZCA9PSAnMCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3JlZGl0IGNhcmQgaXMgcmVxdWlyZWQgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuIFBsZWFzZSBlbnRlciB5b3VyIGNhcmQgbnVtYmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyB0byBhdm9pZCBhIHNsb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG93biBhdCB0aGUgZXhpdC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBjbGFzcz0ibXQtNCB0ZXh0LWNlbnRlciBjb2xvci1ibGFjayBweC00IiBzdHlsZT0iZm9udC1zaXplOiAxMnB4IiB2LXNob3c9Ik9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGJvb2tpbmdEZXRhaWxzLCAnem9uZScpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIShib29raW5nRGV0YWlscy56b25lLmlzR2F0ZWQgPT0gJzEnKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlZERhdGVUaW1lIDw9IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBIHZhbGlkIGNyZWRpdCBjYXJkIGlzIHJlcXVpcmVkIHRvIHBhcmsuIFdpdGhvdXQgb25lLCB5b3UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bGQgYmUgc3ViamVjdCB0byBhIHBhcmtpbmcgdmlvbGF0aW9uIGFuZCBpc3N1ZWQgYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaXRhdGlvbi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBjbGFzcz0ibXQtNCBjb2xvci1ibGFjayB0ZXh0LWNlbnRlciBweC00IiBzdHlsZT0iZm9udC1zaXplOiAxMnB4IiB2LXNob3c9ImJvb2tpbmdEZXRhaWxzLmhhc093blByb3BlcnR5KCdib29raW5nJykgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5ib29raW5nLmhhc093blByb3BlcnR5KCd2YWxpZGF0ZWQnKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcudmFsaWRhdGVkID09ICcxJyAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlZERhdGVUaW1lID4gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4aXRpbmcgYWZ0ZXIgdGhlIHZhbGlkYXRlZCB0aW1lIHBlcmlvZCB3aWxsIHJlcXVpcmUgYSB2YWxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVkaXQgY2FyZCB0byBjb250aW51ZSBwYXJraW5nLiBXaXRob3V0IG9uZSwgeW91IGNvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QgdG8gYSBwYXJraW5nIHZpb2xhdGlvbiBhbmQgaXNzdWVkIGEgY2l0YXRpb24uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgY2xhc3M9InB4LTQgbXQtMiBjb2xvci1ibGFjayB0ZXh0LWNlbnRlciIgc3R5bGU9ImZvbnQtc2l6ZTogMTJweCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LXNob3c9Imlvc0RldmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFlvdSdyZSBvbmx5IGF1dGhvcml6aW5nIHBheW1lbnQgbm93LiBXZSdsbCBjaGFyZ2UgeW91IGF1dG9tYXRpY2FsbHkgd2hlbiB5b3UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tvdXQgYmFzZWQgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uIG9mIHN0YXkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KCiAgICAgICAgICAgICAgICAgICAgPC92LWNvbnRhaW5lcj4KICAgICAgICAgICAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgICAgICAgICAgICAgICA8di1jYXJkLWFjdGlvbnMgY2xhc3M9Imp1c3RpZnktY2VudGVyIHBiLTEwIiB2LWlmPSJzaG93UGF5bWVudENhcmRBZGRlZCI+CiAgICAgICAgICAgICAgICAgICAgPHYtY29udGFpbmVyIGNsYXNzPSJwYS0wIiBmbHVpZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtcm93IG5vLWd1dHRlcnMgY2xhc3M9InRleHQtY2VudGVyIHB4LTEwIiB2LWlmPSJib29raW5nRGV0YWlscy5oYXNPd25Qcm9wZXJ0eSgnZXhpdE9wdGlvbnMnKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoYm9va2luZ0RldGFpbHMsICd6b25lJykgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICEoYm9va2luZ0RldGFpbHMuem9uZS5pc0dhdGVkID09ICcwJykgJiYgYm9va2luZ0RldGFpbHMuZXhpdE9wdGlvbnMubGVuZ3RoID4gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCB2LWlmPSJpc0NoZWNrb3V0RW5hYmxlZCgxKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYXZhdGFyIGNvbG9yPSJyZWQiIGNsYXNzPSJwYS02IiBAY2xpY2s9Im9wZW5TTVNEaWFsb2coKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24gbWVkaXVtIGNvbG9yPSJ3aGl0ZSBhY2NlbnQtMiIgY2xhc3M9InB4LTQiIGRhcms+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldEV4aXRJY29uKDEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYXZhdGFyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJncmV5LS10ZXh0IHRleHQtLWRhcmtlbi0xIGV4aXQtb3B0aW9uLXRleHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBnZXRFeGl0VGV4dCgxKSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgdi1pZj0iaXNDaGVja291dEVuYWJsZWQoMikiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWF2YXRhciBjb2xvcj0icmVkIiBjbGFzcz0icGEtNiIgQGNsaWNrLnN0b3A9Im9wZW5TbXNRclNjYW5uZXIoKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24gbWVkaXVtIGNvbG9yPSJ3aGl0ZSBhY2NlbnQtMiIgY2xhc3M9InB4LTQiIGRhcms+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldEV4aXRJY29uKDIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYXZhdGFyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJncmV5LS10ZXh0IHRleHQtLWRhcmtlbi0xIGV4aXQtb3B0aW9uLXRleHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBnZXRFeGl0VGV4dCgyKSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgdi1pZj0iaXNDaGVja291dEVuYWJsZWQoMykiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWF2YXRhciBjb2xvcj0icmVkIiBjbGFzcz0icGEtNiIgQGNsaWNrPSJkaWFsZXJEaWFsb2cgPSB0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbiBtZWRpdW0gY29sb3I9IndoaXRlIGFjY2VudC0yIiBjbGFzcz0icHgtNCIgZGFyaz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0RXhpdEljb24oMykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1hdmF0YXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImdyZXktLXRleHQgdGV4dC0tZGFya2VuLTEgZXhpdC1vcHRpb24tdGV4dCI+e3sgZ2V0RXhpdFRleHQoMykgfX08L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICAgICAgICA8di1yb3cgbm8tZ3V0dGVycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj0iYm9va2luZ0RldGFpbHMuem9uZS5pc1BRUkVuZFJlc2VydmF0aW9uID09IDEgJiYgYm9va2luZ0RldGFpbHMuYm9va2luZy5UeXBlT2ZCb29raW5nID09ICdTZWxmIHJlc2VydmF0aW9uJyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIGNsYXNzPSJweC0yIG10LTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biByb3VuZGVkIGVsZXZhdGlvbj0iMjAiIGNsYXNzPSJhZGRfbGljZW5jZV9wbGF0ZV9idG4gd2hpdGUtLXRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0ib3BlbkV4dERpYWxvZygpIj5FeHRlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFya2luZzwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICAgICAgICA8di1yb3cgbm8tZ3V0dGVycyB2LXNob3c9Ik9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGJvb2tpbmdEZXRhaWxzLCAnem9uZScpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhKGJvb2tpbmdEZXRhaWxzLnpvbmUuaXNHYXRlZCA9PSAnMCcpICYmIChpc0NoZWNrb3V0RW5hYmxlZCgxKSB8fCBpc0NoZWNrb3V0RW5hYmxlZCgyKSB8fCBpc0NoZWNrb3V0RW5hYmxlZCgzKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIGNsYXNzPSJtdC0yIHRleHQtY2VudGVyIGNvbG9yLWJsYWNrIiBzdHlsZT0iZm9udC1zaXplOiAxMnB4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdoZW4geW91J3JlIHJlYWR5IHRvIGxlYXZlLCBwbGVhc2UgbG9vayBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+MyBkaWdpdDwvc3Ryb25nPiBnYXRlIGNvZGUgb24gdGhlIHNpZ24gaW4gdGhlIGV4aXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZS4gVHlwZSB0aGF0IGNvZGUgd2hlbiBwcm9tcHRlZC4gSGF2ZSBhIGdvb2QgZGF5IQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LXJvdyBuby1ndXR0ZXJzIGNsYXNzPSJtdC00IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj0iT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoYm9va2luZ0RldGFpbHMsICdib29raW5nJykgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoYm9va2luZ0RldGFpbHMuYm9va2luZywgJ3BheW1lbnRUeXBlJykgJiYgYm9va2luZ0RldGFpbHMuYm9va2luZy5wYXltZW50VHlwZSAhPSAnJyAmJiAoYm9va2luZ0RldGFpbHMuYm9va2luZy5wYXltZW50VHlwZSA9PSAnQVBQTEVfUEFZJyB8fCBib29raW5nRGV0YWlscy5ib29raW5nLnBheW1lbnRUeXBlID09ICdHT09HTEVfUEFZJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBjbGFzcz0idGV4dC1jZW50ZXIgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtc2l6ZTogMTNweDsiPkF1dGhvcml6ZWQgd2l0aCB7ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRQYXltZW50VHlwZShib29raW5nRGV0YWlscy5ib29raW5nLnBheW1lbnRUeXBlKSB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LXJvdyBuby1ndXR0ZXJzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBjbGFzcz0icHgtNCBtdC00IHRleHQtY2VudGVyIGNvbG9yLWJsYWNrIGZvbnQtd2VpZ2h0LWJvbGQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImZvbnQtc2l6ZTogMTNweCIgdi1zaG93PSIoYm9va2luZ0RldGFpbHMuaGFzT3duUHJvcGVydHkoJ2Jvb2tpbmcnKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5ib29raW5nLmhhc093blByb3BlcnR5KCdjYXJkTm8nKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5ib29raW5nLmhhc093blByb3BlcnR5KCdhY2NvdW50VHlwZScpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcuYWNjb3VudFR5cGUgPT0gJzInKSB8fAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYm9va2luZ0RldGFpbHMuYm9va2luZy5jYXJkT25maWxlID09ICcxJyAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcuYWNjb3VudFR5cGUgPT0gJzAnIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9va2luZ0RldGFpbHMuYm9va2luZy5hY2NvdW50VHlwZSA9PSAnMScpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcuY2FyZE5vID09ICcwJyB8fAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcuY2FyZE5vID09ICcnIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9va2luZ0RldGFpbHMuYm9va2luZy5jYXJkTm8gPT0gbnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhcmQgZW5kaW5nIHdpdGggKnt7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5oYXNPd25Qcm9wZXJ0eSgiYm9va2luZyIpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5ib29raW5nLmhhc093blByb3BlcnR5KCJjYXJkTm8iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBib29raW5nRGV0YWlscy5ib29raW5nLmNhcmRObwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbiBmaWxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtcm93IG5vLWd1dHRlcnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9ImJvb2tpbmdEZXRhaWxzLnpvbmUuaXNQUVJFbmRSZXNlcnZhdGlvbiA9PSAxICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChib29raW5nRGV0YWlscy5ib29raW5nLmNhcmRPbmZpbGUgPT0gJzEnIHx8IGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcuY2FyZE9uZmlsZSA9PSAnMicpICYmIChib29raW5nRGV0YWlscy5ib29raW5nLlR5cGVPZkJvb2tpbmcgPT0gJ0d1ZXN0JyB8fCBib29raW5nRGV0YWlscy5ib29raW5nLlR5cGVPZkJvb2tpbmcgPT0gJ1RyYW5zaWVudCcpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgY2xhc3M9Im10LTQgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biB0ZXh0IGNvbG9yPSJwcmltYXJ5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOiAxNXB4O2ZvbnQtd2VpZ2h0OiBib2xkZXI7dGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImhvdGVsR3Vlc3QiPkkgYW0gYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3Zlcm5pZ2h0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvdGVsIGd1ZXN0PC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LXJvdyBuby1ndXR0ZXJzIGNsYXNzPSJtdC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgY2xhc3M9InRleHQtY2VudGVyIG10LTIiIHYtc2hvdz0iYm9va2luZ0RldGFpbHMuaGFzT3duUHJvcGVydHkoJ2Jvb2tpbmcnKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcuaGFzT3duUHJvcGVydHkoJ3ZhbGlkYXRlZCcpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9va2luZ0RldGFpbHMuYm9va2luZy52YWxpZGF0ZWQgIT0gJzEnICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9va2luZ0RldGFpbHMuYm9va2luZy5pc1ZhbGlkYXRpb25FbmFibGVkID09ICcxJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuIHJvdW5kZWQgZWxldmF0aW9uPSIyNCIgZGVuc2Ugd2lkdGg9Ijc1JSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InZhbGlkYXRlX2J0biB3aGl0ZS0tdGV4dCBibHVlIGRhcmtlbi0yIG5vLXVwcGVyLWNhc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0ib3BlblZhbGlkYXRpb25EaWFsb2coKSI+QXBwbHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWW91ciBWYWxpZGF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgY2xhc3M9Im10LTEwIHBhLTAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChib29raW5nRGV0YWlscywgJ3pvbmUnKSAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChib29raW5nRGV0YWlscy56b25lLCAnaXNMb3lhbHR5U3VwcG9ydGVkJykgJiYgYm9va2luZ0RldGFpbHMuem9uZS5pc0xveWFsdHlTdXBwb3J0ZWQgPT0gJzEnICYmIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcudmFsaWRhdGVkICE9ICcxJyAmJiAoYm9va2luZ0RldGFpbHMuYm9va2luZy5UeXBlT2ZCb29raW5nID09ICdHdWVzdCcgfHwgYm9va2luZ0RldGFpbHMuYm9va2luZy5UeXBlT2ZCb29raW5nID09ICdUcmFuc2llbnQnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jYXJkIGZsYXQgY29sb3I9IiNlY2VjZWMiIGNsYXNzPSJtYS0wIiB0aWxlIG1heC13aWR0aD0iMTAwJSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1yb3cgY2xhc3M9InRleHQtY2VudGVyIHB0LTAiIG5vLWd1dHRlcnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIGNsYXNzPSJwYS0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0iZm9udC1zaXplOiAxNXB4O2NvbG9yOiAjRjI1NTVDO2ZvbnQtd2VpZ2h0OiBib2xkZXI7Ij5DTEFJTQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZT1VSIFBBUktJTkcgRElTQ09VTlQ8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gY29sb3I9ImJsYWNrIiBjbGFzcz0icGEtMCBtYS0wIiByb3VuZGVkIHdpZHRoPSIyNzAiIGhlaWdodD0iNzAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZXZhdGlvbj0iMjAiIEBjbGljaz0ibG95YWx0eSA9IHRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1hdmF0YXIgdGlsZSB3aWR0aD0iMjAwIiBoZWlnaHQ9IjEwMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pbWcgc3JjPSIuLi9hc3NldHMvR05Mb3lhbHR5LnBuZyIgaGVpZ2h0PSI2MHB4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSI0MDBweCI+PC92LWltZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWF2YXRhcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8di1yb3cgbm8tZ3V0dGVycyBjbGFzcz0idGV4dC1jZW50ZXIgbXQtMSIgdi1zaG93PSJPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChib29raW5nRGV0YWlscywgJ3pvbmUnKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9va2luZ0RldGFpbHMuem9uZS5pc0dhdGVkID09ICcwJyAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9va2luZ0RldGFpbHMuYm9va2luZy5jYXJkT25maWxlID09ICcxJyAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVkRGF0ZVRpbWUgPD0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgY2xhc3M9Im10LTIgY29sb3ItYmxhY2siIHN0eWxlPSJmb250LXNpemU6IDEycHgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGNhcmQgb24gZmlsZSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY2hhcmdlZCBmb3IgdGhlIHRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFya2VkIHdoZW4geW91IGV4aXQgdGhlIGdhcmFnZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgoKICAgICAgICAgICAgICAgICAgICAgICAgPHYtcm93IG5vLWd1dHRlcnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIGNsYXNzPSJtdC0xIHRleHQtY2VudGVyIiB2LXNob3c9ImJvb2tpbmdEZXRhaWxzLmhhc093blByb3BlcnR5KCdib29raW5nJykgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5ib29raW5nLmhhc093blByb3BlcnR5KCdjYXJkTm8nKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcuaGFzT3duUHJvcGVydHkoJ2FjY291bnRUeXBlJykgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29raW5nRGV0YWlscy5ib29raW5nLmhhc093blByb3BlcnR5KCdjYXJkVXBkYXRlZCcpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIShib29raW5nRGV0YWlscy5ib29raW5nLmNhcmRVcGRhdGVkID09ICcxJykgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYm9va2luZ0RldGFpbHMuYm9va2luZy5hY2NvdW50VHlwZSA9PSAnMicgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcuY2FyZE9uZmlsZSA9PSAnMScgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcuYWNjb3VudFR5cGUgPT0gJzAnKSkgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhKGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcudGFwVG9DaGFuZ2VDYXJkID09ICcwJykgJiYgIShib29raW5nRGV0YWlscy5ib29raW5nLnBheW1lbnRUeXBlID09ICdBUFBMRV9QQVknIHx8IGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcucGF5bWVudFR5cGUgPT0gJ0dPT0dMRV9QQVknKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRleHQtY2FwdGlvbiIgQGNsaWNrPSJuYXZpZ2F0ZVRvQWRkUGF5bWVudCgpIj5UYXAgdG8gY2hhbmdlIGNhcmQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICAgICAgICA8di1yb3cgbm8tZ3V0dGVycz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgY2xhc3M9Im10LTQgdGV4dC1jZW50ZXIgY29sb3ItYmxhY2siIHN0eWxlPSJmb250LXNpemU6IDEycHgiIHYtc2hvdz0iT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoYm9va2luZ0RldGFpbHMsICd6b25lJykgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhKGJvb2tpbmdEZXRhaWxzLnpvbmUuaXNHYXRlZCA9PSAnMScpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVkRGF0ZVRpbWUgPD0gMCAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcuY2FyZE9uZmlsZSAhPSAnMScKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBIHZhbGlkIGNyZWRpdCBjYXJkIGlzIHJlcXVpcmVkIHRvIHBhcmsuIFdpdGhvdXQgb25lLCB5b3UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bGQgYmUgc3ViamVjdCB0byBhIHBhcmtpbmcgdmlvbGF0aW9uIGFuZCBpc3N1ZWQgYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaXRhdGlvbi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICAgICAgICA8di1yb3cgbm8tZ3V0dGVycz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgY2xhc3M9Im10LTQgdGV4dC1jZW50ZXIgY29sb3ItYmxhY2siIHN0eWxlPSJmb250LXNpemU6IDEycHgiIHYtc2hvdz0iYm9va2luZ0RldGFpbHMuaGFzT3duUHJvcGVydHkoJ2Jvb2tpbmcnKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tpbmdEZXRhaWxzLmJvb2tpbmcuaGFzT3duUHJvcGVydHkoJ3ZhbGlkYXRlZCcpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9va2luZ0RldGFpbHMuYm9va2luZy52YWxpZGF0ZWQgPT0gJzEnICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVkRGF0ZVRpbWUgPiAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRXhpdGluZyBhZnRlciB0aGUgdmFsaWRhdGVkIHRpbWUgcGVyaW9kIHdpbGwgcmVxdWlyZSBhIHZhbGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWRpdCBjYXJkIHRvIGNvbnRpbnVlIHBhcmtpbmcuIFdpdGhvdXQgb25lLCB5b3UgY291bGQgYmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdCB0byBhIHBhcmtpbmcgdmlvbGF0aW9uIGFuZCBpc3N1ZWQgYSBjaXRhdGlvbi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICAgIDwvdi1jb250YWluZXI+CiAgICAgICAgICAgICAgICA8L3YtY2FyZC1hY3Rpb25zPgogICAgICAgICAgICAgICAgPCEtLSA8di1yb3cgdi1pZj0ic2hvd1BheW1lbnRDYXJkQWRkZWQiPgogICAgICAgICAgICA8di1jb2w+CiAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgeC1zbWFsbAogICAgICAgICAgICAgICAgY29sb3I9ImdyZWVuIgogICAgICAgICAgICAgICAgY2xhc3M9InB4LTQiCiAgICAgICAgICAgICAgICBkYXJrCiAgICAgICAgICAgICAgICBAY2xpY2s9Im5hdmlnYXRlVG9DaGVja091dCIKICAgICAgICAgICAgICA+bWRpLWV4aXQtdG8tYXBwPC92LWljb24+CiAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICA8L3Ytcm93Pi0tPgogICAgICAgICAgICAgICAgPCEtLSA8L3YtcmVzcG9uc2l2ZT4gLS0+CiAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgIDwvdi1jb2w+CiAgICA8L3Ytcm93PgogICAgPHYtZGlhbG9nIHYtbW9kZWw9ImFsZXJ0RGlhbG9nIiBwZXJzaXN0ZW50IG1heC13aWR0aD0iMjkwIj4KICAgICAgICA8di1jYXJkIGNsYXNzPSJwYS0wIj4KICAgICAgICAgICAgPHYtY2FyZC10aXRsZSBjbGFzcz0ianVzdGlmeS1jZW50ZXIiIHN0eWxlPSJwb3NpdGlvbjogcmVsYXRpdmUiPgogICAgICAgICAgICAgICAgPHYtaWNvbiB4LWxhcmdlIGNvbG9yPSJncmVlbiBhY2NlbnQtMiI+e3sgYWxlcnRJY29uIH19PC92LWljb24+CiAgICAgICAgICAgIDwvdi1jYXJkLXRpdGxlPgogICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9InRleHQtY2VudGVyIG10LTUiPgogICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtc2l6ZTogMjBweCI+e3sgYWxlcnRNc2cgfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgIDx2LWNhcmQtYWN0aW9ucyBjbGFzcz0idGV4dC1jZW50ZXIgcGItNiI+CiAgICAgICAgICAgICAgICA8di1jb250YWluZXIgcGEtMCBmbHVpZD4KICAgICAgICAgICAgICAgICAgICA8di1yb3cgbm8tZ3V0dGVycz4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biByb3VuZGVkIGJsb2NrIGVsZXZhdGlvbj0iMCIgY2xhc3M9IndoaXRlLS10ZXh0IGV4aXRfZGlhbG9nX2J0biIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImNsb3NlQWxlcnREaWFsb2coKSI+Q2xvc2U8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICA8L3YtY29udGFpbmVyPgogICAgICAgICAgICA8L3YtY2FyZC1hY3Rpb25zPgogICAgICAgIDwvdi1jYXJkPgogICAgPC92LWRpYWxvZz4gPHYtZGlhbG9nIHYtbW9kZWw9ImxveWFsdHkiIHdpZHRoPSI3NTBweCI+CiAgICAgICAgPHYtY2FyZD4KICAgICAgICAgICAgPHYtcm93IG5vLWd1dHRlcnMgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6IGJsYWNrOyIgY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgIDx2LWNvbCBjbGFzcz0idGV4dC1jZW50ZXIgcHQtMSAiPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMvR05Mb3lhbHR5LnBuZyIgd2lkdGg9IjIwMHB4IiBoZWlnaHQ9IjY1cHgiPgogICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgPHYtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtcm93IG5vLWd1dHRlcnMgY2xhc3M9Im10LTQiPgogICAgICAgICAgICAgICAgICAgIDx2LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9ImZvbnQtc2l6ZTpsYXJnZTtjb2xvcjogYmxhY2s7Ij5FbnRlciB0aGUgMjRLIFNlbGVjdCBudW1iZXIgZm91bmQgb24geW91ciBMb3lhbHR5IENhcmQKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgPHYtcm93IG5vLWd1dHRlcnMgY2xhc3M9Im10LTIiPgogICAgICAgICAgICAgICAgICAgIDx2LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCBsYWJlbD0iMjRLIFNlbGVjdCBOdW1iZXIiIG91dGxpbmVkIHYtbW9kZWw9ImxveWFsdHkyNGtudW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAa2V5dXA9ImxveWFsdHlWYWxpZCI+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICA8di1yb3cgbm8tZ3V0dGVycyBjbGFzcz0ibXQtMiB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgPHYtY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gY29sb3I9IiNGMjU1NUMiIHdpZHRoPSIxODAiIHJvdW5kZWQgY2xhc3M9IndoaXRlLS10ZXh0IiA6ZGlzYWJsZWQ9ImRpc2FibGVMb3lhbHR5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJzdWJtaXRMb3lhbHR5KGxveWFsdHkyNGtudW0pIj5TdWJtaXQ8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgIDwvdi1jYXJkPgogICAgPC92LWRpYWxvZz4KICAgIDx2LWRpYWxvZyB2LW1vZGVsPSJxckNvZGVEaWFsb2ciIHdpZHRoPSJmaXQtY29udGVudCIgcGVyc2lzdGVudD4KICAgICAgICA8di1jYXJkPgogICAgICAgICAgICA8di1jYXJkLXRpdGxlPgogICAgICAgICAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgICAgICAgICA8di1pY29uIEBjbGljaz0iY2xvc2VRUkNvZGVEaWFsb2coKSI+bWRpLWNsb3NlPC92LWljb24+CiAgICAgICAgICAgIDwvdi1jYXJkLXRpdGxlPgogICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9InBhLTEiPgogICAgICAgICAgICAgICAgPHFyLWNvZGUtc2Nhbm5lciA6c2Nhbj0iJ3NtcyciIHYtYmluZDpxcmJveD0iMjUwIiB2LWJpbmQ6ZnBzPSIzMCIKICAgICAgICAgICAgICAgICAgICA6Y2FtZXJhU3RhdHVzPSJjYW1lcmFTdGF0dXMiPjwvcXItY29kZS1zY2FubmVyPgogICAgICAgICAgICAgICAgPHYtcHJvZ3Jlc3MtY2lyY3VsYXIgdi1pZj0iIWNhbWVyYVN0YXR1cyIgY2xhc3M9InZhbGlkYXRpb24tcGVuZGluZyIgaW5kZXRlcm1pbmF0ZQogICAgICAgICAgICAgICAgICAgIGNvbG9yPSJyZWQiPjwvdi1wcm9ncmVzcy1jaXJjdWxhcj4KICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgPHYtY2FyZC1hY3Rpb25zPgogICAgICAgICAgICAgICAgPHYtY29udGFpbmVyIGNsYXNzPSJwYS0wIiBmbHVpZD4KICAgICAgICAgICAgICAgICAgICA8di1yb3cgbm8tZ3V0dGVycz4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImdyZXktLXRleHQgZm9udC13ZWlnaHQtYm9sZCBxcl90ZXh0IG1yLTQiPlNjYW4gdGhlIFFSIGNvZGUgYWZmaXhlZCB0byBleGl0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhdGU8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LXNwYWNlcj48L3Ytc3BhY2VyPgogICAgICAgICAgICAgICAgICAgICAgICA8di1pbWcgc3JjPSIuLi9hc3NldHMvcXItY29kZS5wbmciIHN0eWxlPSJvcGFjaXR5OiAwLjciIG1heC13aWR0aD0iNTIiPjwvdi1pbWc+CiAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgIDwvdi1jb250YWluZXI+CiAgICAgICAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgICAgICAgPC92LWNhcmQ+CiAgICA8L3YtZGlhbG9nPgogICAgPGRpdj4KICAgICAgICA8di1kaWFsb2cgdi1tb2RlbD0ic21zRGlhbG9nIiB3aWR0aD0iZml0LWNvbnRlbnQiPgogICAgICAgICAgICA8di1jYXJkIGNsYXNzPSJwYS0wIiByZWY9InNtc2NvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRpdGxlIGNsYXNzPSJqdXN0aWZ5LWNlbnRlciIgc3R5bGU9InBvc2l0aW9uOiByZWxhdGl2ZSI+CiAgICAgICAgICAgICAgICAgICAgPHYtYnRuIGNsYXNzIGVsZXZhdGlvbj0iMCIgY29sb3I9IndoaXRlIiBkYXJrIGZhYiB4LWxhcmdlPgogICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uIHgtbGFyZ2UgY29sb3I9InJlZCBhY2NlbnQtMiI+bWRpLW1lc3NhZ2UtdGV4dDwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICA8L3YtY2FyZC10aXRsZT4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0icGEtMCI+CiAgICAgICAgICAgICAgICAgICAgPHYtY29udGFpbmVyIGNsYXNzPSJweC00IiBmbHVpZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtcm93IG5vLWd1dHRlcnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIGNsYXNzPSJ0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjb2xvci1ibGFjayIgc3R5bGU9ImZvbnQtc2l6ZTogMjRweDsgbGluZS1oZWlnaHQ6IDM1cHgiPkVudGVyIHRoZSBnYXRlIGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd24gaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmUgdG8gZXhpdC48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8cCBjbGFzcz0ic21zLWNhcHRpb24gY29sb3ItYmxhY2siPgogICAgICAgICAgICAgICAgICAgIFdlJ2xsIGNvcHkgdGhlIGNvZGUgaW50byBhIHRleHQgbWVzc2FnZSBmb3IgeW91LiBZb3UnbGwgbmVlZAogICAgICAgICAgICAgICAgICAgIHRvIHRhcCBzZW5kIG9uIHRoZSBtZXNzYWdlIHRvIG9wZW4gdGhlIGdhdGUuCiAgICAgICAgICAgICAgICAgIDwvcD4tLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIGNsYXNzPSJtdC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIGNsYXNzPSJzbXMtaW5wdXQiIGNvbG9yPSJyZWQiIHYtbW9kZWw9InNtc1RleHQiIG91dGxpbmVkIGxhYmVsPSJHYXRlIGNvZGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aD0iNiIgdHlwZT0idGVsIiBhdXRvZm9jdXMgdi1vbjprZXl1cC5lbnRlcj0ib3BlblNNU0FwcCgpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZm9jdXM9InNjcm9sbFRvU3VibWl0KCkiIEBtb3VzZXVwPSJzY3JvbGxUb1N1Ym1pdCgpIiBAa2V5ZG93bj0ic2Nyb2xsVG9TdWJtaXQoKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJhYmxlIGhlaWdodD0iODBweCI+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICAgIDwvdi1jb250YWluZXI+CiAgICAgICAgICAgICAgICAgICAgPHYtcHJvZ3Jlc3MtY2lyY3VsYXIgdi1pZj0ic21zUGVuZGluZyIgY2xhc3M9InZhbGlkYXRpb24tcGVuZGluZyIgaW5kZXRlcm1pbmF0ZQogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0icmVkIj48L3YtcHJvZ3Jlc3MtY2lyY3VsYXI+CiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtY2FyZC1hY3Rpb25zIGNsYXNzPSJ0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgPHYtY29udGFpbmVyIHBhLTAgZmx1aWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LXJvdyBuby1ndXR0ZXJzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gaWQ9InN1Ym1pdHNtc2J0biIgcm91bmRlZCBibG9jayBlbGV2YXRpb249IjIwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9InNtc1RleHQgPT0gJycgfHwgc21zUGVuZGluZyIgY2xhc3M9IndoaXRlLS10ZXh0IGV4aXRfZGlhbG9nX2J0biIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJvcGVuU01TQXBwKCkiPlNVQk1JVDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBjbGFzcz0ibXQtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9ImN1cnNvcjogcG9pbnRlciIgQGNsaWNrPSJzbXNEaWFsb2cgPSBmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsb3NlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgICA8L3YtY29udGFpbmVyPgogICAgICAgICAgICAgICAgPC92LWNhcmQtYWN0aW9ucz4KICAgICAgICAgICAgPC92LWNhcmQ+CiAgICAgICAgPC92LWRpYWxvZz4KICAgIDwvZGl2PgogICAgPGRpdj4KICAgICAgICA8di1kaWFsb2cgdi1tb2RlbD0idmFsaWRhdGVRUkNvZGVEaWFsb2ciIHdpZHRoPSJmaXQtY29udGVudCIgcGVyc2lzdGVudD4KICAgICAgICAgICAgPHYtY2FyZD4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgICAgICAgICAgICAgPHYtaWNvbiBAY2xpY2s9ImNsb3NlVmFsaWRhdGlvblFSRGlhbG9nKCkiPm1kaS1jbG9zZTwvdi1pY29uPgogICAgICAgICAgICAgICAgPC92LWNhcmQtdGl0bGU+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9InBhLTEiPgogICAgICAgICAgICAgICAgICAgIDx2YWxpZGF0aW9uLXFyLWNvZGUtc2Nhbm5lciA6c2Nhbj0iJ3ZhbGlkYXRpb25Db2RlJyIgdi1iaW5kOnFyYm94PSIyNTAiIHYtYmluZDpmcHM9IjMwIgogICAgICAgICAgICAgICAgICAgICAgICA6Y2FtZXJhU3RhdHVzPSJ2YWxpZGF0aW9uQ2FtZXJhU3RhdHVzIj48L3ZhbGlkYXRpb24tcXItY29kZS1zY2FubmVyPgogICAgICAgICAgICAgICAgICAgIDx2LXByb2dyZXNzLWNpcmN1bGFyIHYtaWY9IiF2YWxpZGF0aW9uQ2FtZXJhU3RhdHVzIiBjbGFzcz0idmFsaWRhdGlvbi1wZW5kaW5nIiBpbmRldGVybWluYXRlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJyZWQiPjwvdi1wcm9ncmVzcy1jaXJjdWxhcj4KICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1jYXJkLWFjdGlvbnM+CiAgICAgICAgICAgICAgICAgICAgPHYtY29udGFpbmVyIGNsYXNzPSJwYS0wIiBmbHVpZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtcm93IG5vLWd1dHRlcnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iNyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImdyZXktLXRleHQgZm9udC13ZWlnaHQtYm9sZCBxcl90ZXh0IG1yLTQiPlBsZWFzZSBzY2FuIHRoZSB2YWxpZGF0aW9uIFFSIGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pbWcgc3JjPSIuLi9hc3NldHMvcXItY29kZS5wbmciIHN0eWxlPSJvcGFjaXR5OiAwLjciIG1heC13aWR0aD0iNTIiPjwvdi1pbWc+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgPC92LWNvbnRhaW5lcj4KICAgICAgICAgICAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgIDwvdi1kaWFsb2c+CiAgICA8L2Rpdj4KICAgIDxkaXY+CiAgICAgICAgPHYtZGlhbG9nIHYtbW9kZWw9InZhbGlkYXRlQm9va2luZ0RpYWxvZyIgd2lkdGg9ImZpdC1jb250ZW50Ij4KICAgICAgICAgICAgPHYtY2FyZCBjbGFzcz0icGEtMCIgcmVmPSJ2YWxpZGF0ZWNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRpdGxlIGNsYXNzPSJqdXN0aWZ5LWNlbnRlciIgc3R5bGU9InBvc2l0aW9uOiByZWxhdGl2ZSI+CiAgICAgICAgICAgICAgICAgICAgPHYtYnRuIGNsYXNzIGVsZXZhdGlvbj0iMCIgY29sb3I9IndoaXRlIiBkYXJrIGZhYiBsYXJnZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbiB4LWxhcmdlIGNvbG9yPSJyZWQgYWNjZW50LTIiPm1kaS10aWNrZXQtcGVyY2VudDwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICA8L3YtY2FyZC10aXRsZT4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0icGEtMCI+CiAgICAgICAgICAgICAgICAgICAgPHYtY29udGFpbmVyIGNsYXNzPSJweC00IHB5LTAiIGZsdWlkPgogICAgICAgICAgICAgICAgICAgICAgICA8di1yb3cgbm8tZ3V0dGVycz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgY2xhc3M9InRleHQtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNvbG9yLWJsYWNrIHRleHQtY2VudGVyIiBzdHlsZT0iZm9udC1zaXplOiAyNHB4OyBsaW5lLWhlaWdodDogMzVweCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIHRoZSBNZXJjaGFudCBwcm92aWRlZCB5b3UgYSB2YWxpZGF0aW9uIGNvZGUsIHlvdSBtYXkgc2NhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdCBvciBlbnRlciBpdCBoZXJlLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biByb3VuZGVkIGJsb2NrIGVsZXZhdGlvbj0iMjAiIGNsYXNzPSJ3aGl0ZS0tdGV4dCBleGl0X2RpYWxvZ19idG4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0ib3BlblNjYW5WYWxpZGF0aW9uQ29kZSgpIj5TY2FuIFZhbGlkYXRpb24gQ29kZTwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBjbGFzcz0idGV4dC1sZWZ0IG10LTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjb2xvci1ibGFjayIgc3R5bGU9ImZvbnQtc2l6ZTogMjRweDsgbGluZS1oZWlnaHQ6IDM1cHgiPm9yIGVudGVyIGl0IGJlbG93PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCBjbGFzcz0ic21zLWlucHV0IiBjb2xvcj0icmVkIiB2LW1vZGVsPSJ2YWxpZGF0ZUJvb2tpbmdUeHQiIG91dGxpbmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJWYWxpZGF0aW9uIGNvZGUiIGhpZGUtZGV0YWlscz0iYXV0byIgdi1vbjprZXl1cC5lbnRlcj0idmFsaWRhdGVCb29raW5nKCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBmb2N1cz0ic2Nyb2xsVG9WYWxpZGF0ZUJ0bigpIiBAbW91c2V1cD0ic2Nyb2xsVG9WYWxpZGF0ZUJ0bigpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAa2V5ZG93bj0ic2Nyb2xsVG9WYWxpZGF0ZUJ0bigpIiBjbGVhcmFibGUgaGVpZ2h0PSI4MHB4Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgPC92LWNvbnRhaW5lcj4KICAgICAgICAgICAgICAgICAgICA8di1wcm9ncmVzcy1jaXJjdWxhciB2LWlmPSJ2YWxpZGF0ZUJvb2tpbmdQZW5kaW5nIiBjbGFzcz0idmFsaWRhdGlvbi1wZW5kaW5nIiBpbmRldGVybWluYXRlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJyZWQiPjwvdi1wcm9ncmVzcy1jaXJjdWxhcj4KICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1jYXJkLWFjdGlvbnMgY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICA8di1jb250YWluZXIgcGEtMCBmbHVpZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtcm93IG5vLWd1dHRlcnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biBpZD0idmFsaWRhdGVib29raW5nYnRuIiByb3VuZGVkIGJsb2NrIGVsZXZhdGlvbj0iMjAiIDpkaXNhYmxlZD0idmFsaWRhdGVCb29raW5nVHh0ID09ICcnIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQm9va2luZ1R4dCA9PSBudWxsIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQm9va2luZ1BlbmRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBjbGFzcz0id2hpdGUtLXRleHQgZXhpdF9kaWFsb2dfYnRuIiBAY2xpY2s9Im9uVmFsaWRhdGVUZXh0KCkiPlNVQk1JVDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBjbGFzcz0ibXQtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9ImN1cnNvcjogcG9pbnRlciIgQGNsaWNrPSJ2YWxpZGF0ZUJvb2tpbmdEaWFsb2cgPSBmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsb3NlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgICA8L3YtY29udGFpbmVyPgogICAgICAgICAgICAgICAgPC92LWNhcmQtYWN0aW9ucz4KICAgICAgICAgICAgPC92LWNhcmQ+CiAgICAgICAgPC92LWRpYWxvZz4KICAgIDwvZGl2PgogICAgPGRpdj4KICAgICAgICA8di1kaWFsb2cgdi1tb2RlbD0iZGlhbGVyRGlhbG9nIiB3aWR0aD0iZml0LWNvbnRlbnQiPgogICAgICAgICAgICA8di1jYXJkIGNsYXNzPSJwYS0wIj4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGl0bGUgY2xhc3M9Imp1c3RpZnktY2VudGVyIiBzdHlsZT0icG9zaXRpb246IHJlbGF0aXZlIj4KICAgICAgICAgICAgICAgICAgICA8di1idG4gY2xhc3MgZWxldmF0aW9uPSIwIiBjb2xvcj0id2hpdGUiIGRhcmsgZmFiIHgtbGFyZ2U+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24geC1sYXJnZSBjb2xvcj0icmVkIGFjY2VudC0yIj5tZGktcGhvbmUtaW4tdGFsazwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICA8L3YtY2FyZC10aXRsZT4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCBjbGFzcz0icGEtMCI+CiAgICAgICAgICAgICAgICAgICAgPHYtY29udGFpbmVyIGNsYXNzPSJweC00IiBmbHVpZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtcm93IG5vLWd1dHRlcnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIGNsYXNzPSJ0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjb2xvci1ibGFjayIgc3R5bGU9ImZvbnQtc2l6ZTogMjRweDsgbGluZS1oZWlnaHQ6IDM1cHgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUYXAgdG8gY2FsbCB0aGUgZ2F0ZS4gV2hlbiBwcm9tcHRlZCwgZW50ZXIgdGhlIGdhdGUgY29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93biBpbiB0aGUgbGFuZSB0byBleGl0LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgPC92LWNvbnRhaW5lcj4KICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1jYXJkLWFjdGlvbnMgY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICA8di1jb250YWluZXIgcGEtMCBmbHVpZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtcm93IG5vLWd1dHRlcnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biByb3VuZGVkIGJsb2NrIGVsZXZhdGlvbj0iMjAiIGNsYXNzPSJ3aGl0ZS0tdGV4dCBleGl0X2RpYWxvZ19idG4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0ib3BlbkRpYWxlckFwcCI+Q0FMTAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHQVRFPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIGNsYXNzPSJtdC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0iY3Vyc29yOiBwb2ludGVyIiBAY2xpY2s9ImRpYWxlckRpYWxvZyA9IGZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xvc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICAgIDwvdi1jb250YWluZXI+CiAgICAgICAgICAgICAgICA8L3YtY2FyZC1hY3Rpb25zPgogICAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICA8L3YtZGlhbG9nPgogICAgPC9kaXY+CiAgICA8di1kaWFsb2cgdi1tb2RlbD0iZXh0ZW5zaW9uRGlhbG9nIj4KICAgICAgICA8di1jYXJkIGNsYXNzPSJwYS0wIj4KICAgICAgICAgICAgPHYtY2FyZC10aXRsZT48L3YtY2FyZC10aXRsZT4KICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJwYS0wIj4KICAgICAgICAgICAgICAgIDx2LXJvdyBjbGFzcz0idGV4dC1jZW50ZXIgbXQtMyIgbm8tZ3V0dGVycz4KICAgICAgICAgICAgICAgICAgICA8di1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJibGFjay0tdGV4dCIgc3R5bGU9ImZvbnQtd2VpZ2h0OmJvbGQiPkNob29zZSBEYXRlIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj0iT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoYm9va2luZ0RldGFpbHMsICd6b25lJykgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoYm9va2luZ0RldGFpbHMuem9uZSwgJ3RpbWVQaWNrZXJDb25maWd1cmF0aW9uJykgJiYgdGhpcy5ib29raW5nRGV0YWlscy56b25lLnRpbWVQaWNrZXJDb25maWd1cmF0aW9uID09ICcxJyAmJiBib29raW5nRGV0YWlscy56b25lLmlzUFFSRW5kUmVzZXJ2YXRpb24gPT0gMSI+YW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGltZTwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPkV4cGlyZXMgYXQge3sgY291bnREb3duRXhpdFRpbWUgfX08L3A+CiAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICA8di1yb3cgbm8tZ3V0dGVycz4KICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMSIgY2xhc3M9InRleHQtcmlnaHQgYWxpZ24tc2VsZi1jZW50ZXIgcHktNSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24gY2xhc3M9Im1hdGVyaWFsLWljb25zLW91dGxpbmVkIj5jYWxlbmRhcl9tb250aDwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjExIiBjbGFzcz0icHgtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgdi1tb2RlbD0iY29tcHV0ZWREYXRlRm9ybWF0dGVkIiBAY2xpY2s9IigpID0+IHsgb3BlbkRhdGVQaWNrZXIgPSB0cnVlIH0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRlLWRldGFpbHM9ImF1dG8iIHJlYWRvbmx5Pjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICA8di1kaWFsb2cgdi1tb2RlbD0ib3BlbkRhdGVQaWNrZXIiIG1heC13aWR0aD0iNDUwcHgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY2FyZCBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0YyNTU1Qztjb2xvcjogd2hpdGU7Ij48di1jYXJkLXRpdGxlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1yb3cgbm8tZ3V0dGVycz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjbGFzcz0idGV4dC1sZWZ0IiBjb2xzPSIxMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtc2l6ZToxNXB4O2NvbG9yOiAjZmFiYmJlOyI+e3sgdGltZSAhPT0gbnVsbCAmJiB0aW1lICE9PSAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZFllYXIgOiAiIiB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtc2l6ZTozMHB4Ij4ge3sgdGltZSAhPT0gbnVsbCAmJiB0aW1lICE9PSAiIiA/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZERhdGVUaW1lIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQtdGl0bGU+PC92LWNhcmQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2FsZW5kYXIgaW5saW5lIGNsYXNzPSJ0ZXh0LWxlZnQiIHZhbHVlIDpzdGVwTWludXRlPSIxNSIgaG91ckZvcm1hdD0iMTIiIDptaW5EYXRlPSJtaW5EYXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBkYXRlLXNlbGVjdD0ib25UaW1lUGlja2VyQ2hhbmdlIiA6bWF4RGF0ZT0ibWF4RGF0ZSIgdi1tb2RlbD0idGltZSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWRpYWxvZz4KICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgPC92LXJvdz4KCiAgICAgICAgICAgICAgICA8di1yb3cgbm8tZ3V0dGVycwogICAgICAgICAgICAgICAgICAgIHYtaWY9Ik9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGJvb2tpbmdEZXRhaWxzLCAnem9uZScpICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGJvb2tpbmdEZXRhaWxzLnpvbmUsICd0aW1lUGlja2VyQ29uZmlndXJhdGlvbicpICYmIGJvb2tpbmdEZXRhaWxzLnpvbmUudGltZVBpY2tlckNvbmZpZ3VyYXRpb24gPT0gJzEnIj4KICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMSIgY2xhc3M9InRleHQtcmlnaHQgYWxpZ24tc2VsZi1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uIGNsYXNzPSJtYXRlcmlhbC1pY29ucy1vdXRsaW5lZCI+c2NoZWR1bGU8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMSIgY2xhc3M9InB4LTMiPgogICAgICAgICAgICAgICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCB2LW1vZGVsPSJmb3JtYXR0ZWRUaW1lIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IigpID0+IHsgb3BlblRpbWVQaWNrZXIgPSB0cnVlOyByb3VuZCh0aW1lKSB9IiByZWFkb25seT48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1kaWFsb2cgdi1tb2RlbD0ib3BlblRpbWVQaWNrZXIiIG1heC13aWR0aD0iMzIwcHgiIGNsYXNzPSJwYS0wIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s6b3V0c2lkZT0iKCkgPT4geyBzZXREZWZhdWx0RGF0ZSgpOyBvblRpbWVQaWNrZXJDaGFuZ2UoKSB9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY2FyZD48di1jYXJkLXRpdGxlIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjRjI1NTVDO2NvbG9yOiB3aGl0ZTsiPldoYXQgdGltZSB3aWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpdD88L3YtY2FyZC10aXRsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDYWxlbmRhciBpbmxpbmUgc2hvdy10aW1lIHRpbWUtb25seSBjbGFzcz0idGV4dC1sZWZ0ICIgdmFsdWUgOnN0ZXBNaW51dGU9IjE1IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi1tb2RlPSJzaW5nbGUiIGhvdXJGb3JtYXQ9IjEyIiA6bWluRGF0ZT0ibWluRGF0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6bWF4RGF0ZT0ibWF4RGF0ZSIgdi1tb2RlbD0idGltZSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQ+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1kaWFsb2c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICA8L3Ytcm93PgoKICAgICAgICAgICAgICAgIDx2LWNvbnRhaW5lciBmbHVpZCBwYS0wPgogICAgICAgICAgICAgICAgICAgIDxFc3RpbWF0ZSA6c2luZ2xlUXVvdGVzPSJzaW5nbGVRdW90ZXMiIDpkb3VibGVRdW90ZXM9ImRvdWJsZVF1b3RlcyIgOmVzdGltYXRlPSJlc3RpbWF0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgOmZvcm1hdHRlZEVudHJ5RGlzcGxheVRpbWU9ImZvcm1hdHRlZEVudHJ5RGlzcGxheVRpbWUiIDpiZWZvcmVFc3RpbWF0ZT0iYmVmb3JlRXN0aW1hdGUiCiAgICAgICAgICAgICAgICAgICAgICAgIDpzdGF0ZT0iJzIwcHgnIj4KICAgICAgICAgICAgICAgICAgICA8L0VzdGltYXRlPgogICAgICAgICAgICAgICAgICAgIDx2LXJvdyBuby1ndXR0ZXJzIGNsYXNzPSJtdC0zIHBhLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8di1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gcm91bmRlZCBlbGV2YXRpb249IjIwIiA6bG9hZGluZz0iZXh0ZW5kQnRuTG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYWRkX2xpY2VuY2VfcGxhdGVfYnRuIHdoaXRlLS10ZXh0IiBAY2xpY2s9ImV4dGVuZEVEVCgpIj5FeHRlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXJraW5nPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgPC92LWNvbnRhaW5lcj4KICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICA8L3YtY2FyZD4KICAgIDwvdi1kaWFsb2c+CiAgICA8di1kaWFsb2cgdi1tb2RlbD0iaW52YWxpZFFSRGlhbG9nIiBwZXJzaXN0ZW50IG1heC13aWR0aD0iMjkwIj4KICAgICAgICA8di1jYXJkIGNsYXNzPSJwYS0wIj4KICAgICAgICAgICAgPHYtY2FyZC10aXRsZSBjbGFzcz0ianVzdGlmeS1jZW50ZXIiIHN0eWxlPSJwb3NpdGlvbjogcmVsYXRpdmUiPgogICAgICAgICAgICAgICAgPHYtaWNvbiB4LWxhcmdlIGNvbG9yPSJyZWQgYWNjZW50LTIiPm1kaS1hbGVydC1vdXRsaW5lPC92LWljb24+CiAgICAgICAgICAgIDwvdi1jYXJkLXRpdGxlPgogICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9InRleHQtY2VudGVyIG10LTUiPgogICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtc2l6ZTogMjBweCI+e3sgaW52YWxpZFFSTXNnIH19PC9zcGFuPgogICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICA8di1jYXJkLWFjdGlvbnMgY2xhc3M9InRleHQtY2VudGVyIHBiLTYiPgogICAgICAgICAgICAgICAgPHYtY29udGFpbmVyIHBhLTAgZmx1aWQ+CiAgICAgICAgICAgICAgICAgICAgPHYtcm93IG5vLWd1dHRlcnM+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gcm91bmRlZCBibG9jayBlbGV2YXRpb249IjIwIiBjbGFzcz0id2hpdGUtLXRleHQgZXhpdF9kaWFsb2dfYnRuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0icmVTY2FuUVIoKSI+UmUtU2NhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvZGU8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICA8L3YtY29udGFpbmVyPgogICAgICAgICAgICA8L3YtY2FyZC1hY3Rpb25zPgogICAgICAgIDwvdi1jYXJkPgogICAgPC92LWRpYWxvZz4KICAgIDx2LWRpYWxvZyB2LW1vZGVsPSJpbnZhbGlkVmFsaWRhdGlvblFSRGlhbG9nIiBwZXJzaXN0ZW50IG1heC13aWR0aD0iMjkwIj4KICAgICAgICA8di1jYXJkIGNsYXNzPSJwYS0wIj4KICAgICAgICAgICAgPHYtY2FyZC10aXRsZSBjbGFzcz0ianVzdGlmeS1jZW50ZXIiIHN0eWxlPSJwb3NpdGlvbjogcmVsYXRpdmUiPgogICAgICAgICAgICAgICAgPHYtaWNvbiB4LWxhcmdlIGNvbG9yPSJyZWQgYWNjZW50LTIiPm1kaS1hbGVydC1vdXRsaW5lPC92LWljb24+CiAgICAgICAgICAgIDwvdi1jYXJkLXRpdGxlPgogICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9InRleHQtY2VudGVyIG10LTUiPgogICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtc2l6ZTogMjBweCI+e3sgaW52YWxpZFZhbGlkYXRpb25RUk1zZyB9fTwvc3Bhbj4KICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgPHYtY2FyZC1hY3Rpb25zIGNsYXNzPSJ0ZXh0LWNlbnRlciBwYi02Ij4KICAgICAgICAgICAgICAgIDx2LWNvbnRhaW5lciBwYS0wIGZsdWlkPgogICAgICAgICAgICAgICAgICAgIDx2LXJvdyBuby1ndXR0ZXJzPgogICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuIHJvdW5kZWQgYmxvY2sgZWxldmF0aW9uPSIyMCIgY2xhc3M9IndoaXRlLS10ZXh0IGV4aXRfZGlhbG9nX2J0biIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9InJlU2NhblZhbGlkYXRpb25RUigpIj5SZS1TY2FuIENvZGU8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICA8L3YtY29udGFpbmVyPgogICAgICAgICAgICA8L3YtY2FyZC1hY3Rpb25zPgogICAgICAgIDwvdi1jYXJkPgogICAgPC92LWRpYWxvZz4KICAgIDx2LWRpYWxvZyB2LW1vZGVsPSJpbnZhbGlkU01TRGlhbG9nIiBwZXJzaXN0ZW50IG1heC13aWR0aD0iMjkwIj4KICAgICAgICA8di1jYXJkIGNsYXNzPSJwYS0wIj4KICAgICAgICAgICAgPHYtY2FyZC10aXRsZSBjbGFzcz0ianVzdGlmeS1jZW50ZXIiIHN0eWxlPSJwb3NpdGlvbjogcmVsYXRpdmUiPgogICAgICAgICAgICAgICAgPHYtaWNvbiB4LWxhcmdlIGNvbG9yPSJyZWQgYWNjZW50LTIiPm1kaS1hbGVydC1vdXRsaW5lPC92LWljb24+CiAgICAgICAgICAgIDwvdi1jYXJkLXRpdGxlPgogICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9InRleHQtY2VudGVyIG10LTUiPgogICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtc2l6ZTogMjBweCI+e3sgaW52YWxpZFNNU01zZyB9fTwvc3Bhbj4KICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgPHYtY2FyZC1hY3Rpb25zIGNsYXNzPSJ0ZXh0LWNlbnRlciBwYi02Ij4KICAgICAgICAgICAgICAgIDx2LWNvbnRhaW5lciBwYS0wIGZsdWlkPgogICAgICAgICAgICAgICAgICAgIDx2LXJvdyBuby1ndXR0ZXJzPgogICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuIHJvdW5kZWQgYmxvY2sgZWxldmF0aW9uPSIyMCIgY2xhc3M9IndoaXRlLS10ZXh0IGV4aXRfZGlhbG9nX2J0biIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImludmFsaWRTTVNEaWFsb2cgPSBmYWxzZSI+UmUtRW50ZXIgQ29kZTwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgIDwvdi1jb250YWluZXI+CiAgICAgICAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgICAgICAgPC92LWNhcmQ+CiAgICA8L3YtZGlhbG9nPgoKICAgIDx2LWRpYWxvZyB2LW1vZGVsPSJwZWRlc3RyaWFuQWNjZXNzRGlhbG9nIiBwZXJzaXN0ZW50IG1heC13aWR0aD0iMjkwIj4KICAgICAgICA8di1jYXJkIGNsYXNzPSJwYS0wIj4KICAgICAgICAgICAgPHYtY2FyZC10aXRsZSBjbGFzcz0ianVzdGlmeS1jZW50ZXIiIHN0eWxlPSJwb3NpdGlvbjogcmVsYXRpdmUiPgogICAgICAgICAgICAgICAgPHYtaWNvbiB4LWxhcmdlIGNvbG9yPSJyZWQgYWNjZW50LTIiPm1kaS1hbGVydC1vdXRsaW5lPC92LWljb24+CiAgICAgICAgICAgIDwvdi1jYXJkLXRpdGxlPgogICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9InRleHQtY2VudGVyIG10LTUiPgogICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtc2l6ZTogMjBweCI+e3sgcGVkZXN0cmlhbkFjY2Vzc1RleHQgfX08L3NwYW4+CiAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgIDx2LWNhcmQtYWN0aW9ucyBjbGFzcz0idGV4dC1jZW50ZXIgcGItNiI+CiAgICAgICAgICAgICAgICA8di1jb250YWluZXIgcGEtMCBmbHVpZD4KICAgICAgICAgICAgICAgICAgICA8di1yb3cgbm8tZ3V0dGVycz4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biByb3VuZGVkIGJsb2NrIGVsZXZhdGlvbj0iMCIgY2xhc3M9IndoaXRlLS10ZXh0IGV4aXRfZGlhbG9nX2J0biIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9InBlZGVzdHJpYW5BY2Nlc3NEaWFsb2cgPSBmYWxzZSI+Q2xvc2U8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICA8L3YtY29udGFpbmVyPgogICAgICAgICAgICA8L3YtY2FyZC1hY3Rpb25zPgogICAgICAgIDwvdi1jYXJkPgogICAgPC92LWRpYWxvZz4KPC92LWNvbnRhaW5lcj4K"},null]}